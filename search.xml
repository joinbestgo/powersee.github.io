<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>OMV 安装失败如何卸载</title>
      <link href="/2019/12/remove-omv/"/>
      <url>/2019/12/remove-omv/</url>
      <content type="html"><![CDATA[<p>记录在 armbian 上安装 omv 失败的过程。</p><a id="more"></a><p>omv 好像不支持在 Debian bust 上面安装，我直接安装后报错了。然后也没法卸载，并且 apt 也没法用了，一用就会提示<code>E: 软件包 openmediavault-omvextrasorg 需要重新安装，但是我无法找到相应的安装文件。</code>苦恼。</p><p>最终解决方法：</p><ol><li><p><code>rm -rf /var/lib/dpkg/info/openmediavault-omvextrasorg*</code></p></li><li><p><code>sudo dpkg --remove --force-remove-reinstreq openmediavault-omvextrasorg</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg: 警告: 由于开启了 --force 选项，以下问题被忽略：</span><br><span class="line">dpkg: 警告: 该软件包现在的状态极为不妥；</span><br><span class="line">建议您在卸载它之前再重新安装一次</span><br><span class="line">(正在读取数据库 ... 系统当前共安装有 112651 个文件和目录。)</span><br><span class="line">正在卸载 openmediavault-omvextrasorg (5.1.9) ...</span><br></pre></td></tr></table></figure></li><li><p>之后再使用 apt 就不会出现问题了。</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>斐讯 N1、P1 安装 armbian 变身电脑主机</title>
      <link href="/2019/12/N1-armbian/"/>
      <url>/2019/12/N1-armbian/</url>
      <content type="html"><![CDATA[<p>斐讯 N1 这台设备，我之前一直是使用小钢炮这个系统。因为它非常强大了，可以下载，可以共享硬盘里的文件，还可以玩 docker。</p><p>不过其实这台设备还可以装 Debian 和 Ubuntu 系统的，装好之后就可以变成一台电脑主机了，这想想都兴奋。所以我一直想来尝试一下装 armbian 系统。</p><a id="more"></a><p>镜像下载地址：<a href="https://yadi.sk/d/srrtn6kpnsKz2/Linux/ARMBIAN/" target="_blank" rel="noopener">https://yadi.sk/d/srrtn6kpnsKz2/Linux/ARMBIAN/</a></p><p>但是，其实我之前折腾过很久，一直没法进入启动界面，一次又一次的放弃。早上突然想到会不会是我的写入工具有问题？</p><p>所以改用另外一个将镜像写入 U盘的工具，再试一下。</p><p>结果，还是不行……</p><p>然后仔细看看教程，<a href="https://post.smzdm.com/p/aqnl5kz2/" target="_blank" rel="noopener">这篇文章</a>，难不成得先修改 dtb 才可以启动？试一下，果然如此。需要修改 <strong>uEnv.ini</strong> 这个文件。将第一行的dtb_name后面的文字替换成dtb文件夹里斐讯N1的dtb文件名，保存后再来启动就可以了。</p><p>所以跟用什么工具将镜像写入U盘完全没有关系，用</p><ul><li>usb-image-tool</li><li>win32diskimager</li><li>balenaEtcher</li><li>……</li></ul><p>都是可以的，主要是修改那个文件之后再开机就行。</p><p>之后插入 U盘到机器上，启动，正常进入系统。输入账号 root ，密码 1234 。然后需要设置一个新的密码（至少 8 位数）。</p><p>然后需要再建立一个账号，用来登录桌面系统。主要是用户名和密码，其它可以不用填。之后就可以进入桌面。</p><p>进入桌面系统后，这就是一台电脑主机了，可以上网，看视频，听音乐，编程……</p><p>但是想要更好地使用它，我们还得进行一系列的配置。想折腾可以耗费不少的时间。</p><hr><p>不过，后来我发现恩山有位大佬，直接把他自己修改好的系统打包上传上来，这样我们就可以直接使用他的系统，不用自己去配置了。<a href="https://right.com.cn/forum/thread-1380140-1-1.html" target="_blank" rel="noopener">帖子链接</a></p><p>帖子里有百度网盘的链接，里面主要有三个版本，32G 16G 8G ，指的是用这个系统 U盘最少的容量，如果你 U盘大于或等于 32G，那三个版本都可以用。</p><p>16G 镜像下载下来只有八百多兆，因为里面的软件最少，没有 docker 这些软件。8G 的比较好，安装好了 docker，并且容量适中，3G 多。32G 版本我没有下。</p><p>而且，用官方系统会出现没有 WiFi 的问题，<a href="https://right.com.cn/forum/thread-995217-1-1.html" target="_blank" rel="noopener">这个帖子</a> 有讲到，看来用比较老的系统就可以用 WiFi。而使用恩山大佬打包的系统可以使用 WiFi 👍</p><blockquote><p> 所以我个人的建议是直接使用打包的系统。</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>不管是使用原生的系统，还是打包的系统，都需要进行下面的配置。</p><h3 id="改源"><a href="#改源" class="headerlink" title="改源"></a>改源</h3><p>默认的软件源可以连接到，但是慢到怀疑人生。把它改为国内的源，这样我们安装或更新软件会快很多。</p><p><strong>改软件源</strong> <a href="https://www.jiayie.xyz/2019/06/26/N1刷入Armbian后换软件源、安装Docker并提速/" target="_blank" rel="noopener">文章链接</a></p><p>vim /etc/apt/sources.list</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/debian stretch main contrib non-free</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/debian stretch-updates main contrib non-free</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/debian stretch-backports main contrib non-free</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/debian-security/ stretch/updates main contrib non-free</span></span><br></pre></td></tr></table></figure><p><strong>改 armbian 源</strong></p><p>vim /etc/apt/sources.list.d/armbian.list</p><p>将里面的那行注释掉（在前面添加 # ）然后添加这行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/armbian stretch main stretch-utils stretch-desktop</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 设备 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用 syncthing 同步多台设备的文件</title>
      <link href="/2019/11/syncthing-better/"/>
      <url>/2019/11/syncthing-better/</url>
      <content type="html"><![CDATA[<p>又来折腾 syncthing 了，毕竟买了个 10T 的大硬盘，得好好利用起来才行。</p><blockquote><p>syncthing 是一个跨平台、开源的数据同步工具。它可以让你的文件夹，在多台设备保持同步。</p></blockquote><a id="more"></a><h2 id="Syncthing-支持平台"><a href="#Syncthing-支持平台" class="headerlink" title="Syncthing 支持平台"></a>Syncthing 支持平台</h2><p>Syncthing 官方支持 Linux、Windows、OS X、FreeBSD、Solaris 等系统，并且有第三方的 <a href="https://geo.itunes.apple.com/cn/app/fsync/id964427882?mt=8&amp;at=1000l7mq&amp;ct=appinnpost" target="_blank" rel="noopener">iOS</a>、<a href="https://play.google.com/store/apps/details?id=com.nutomic.syncthingandroid" target="_blank" rel="noopener">Android</a> 应用。</p><p>所以利用它，我可以让我手机（Android）的文件，同步到电脑（macOS，Windows）。同时它还可以在 Linux 上用，所以我可以把文件同步到服务器上，也可以同步到刷了<code>小钢炮系统</code>的斐讯 N1 上（系统自带 syncthing）。甚至我可以这些设备全部都使用，确保我的某个文件夹，同步到所有的设备上。（虽然现在没有重要到这样的文件……）</p><p>总之，它是一款很强大的软件，并且还免费开源，很了不起。其实我一年半之前就折腾过了 <a href="/2018/05/syncthing/">之前的文章</a> ，不过说来惭愧，当时折腾了一阵子，就没有再使用它了。因为当时的版本是 0.14 ，很多功能还不完善，并且在 Mac 上面，要使用只能<code>二进制执行文件</code>，并没有做出一个 app ，感觉不太方便。不过我的手机上面一直都有保留着它，即使不怎么使用了。</p><h2 id="现在的变化"><a href="#现在的变化" class="headerlink" title="现在的变化"></a>现在的变化</h2><p>时间过去这么久，这个应用现在更新了很多次，变得越来越好用了。例如：</p><ol><li>有 docker 版本，Linux 上安装起来更加方便</li><li>Windows 和 macOS 都有了 GUI 版本，使用门槛降低</li><li>同步的时候可以选择 仅发送，（而不接收，可以防止对方误操作而导致己方的文件也丢失）</li></ol><p>可能其它的功能我还没有用到，所以并不能更好地体验这个应用，不过就上面这几点，我就挺满意了。</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>在其官网： <a href="https://syncthing.net/" target="_blank" rel="noopener">syncthing.net</a> 上面可以看到下载链接，不过都是放在 GitHub 上的，可能得用代理才能下载。</p><ul><li><strong>Windows</strong> tray utility, filesystem watcher &amp; launcher: <a href="https://github.com/canton7/SyncTrayzor/releases/latest" target="_blank" rel="noopener">SyncTrayzor</a></li><li><strong>macOS</strong> application bundle: <a href="https://github.com/syncthing/syncthing-macos/releases/latest" target="_blank" rel="noopener">syncthing-macos</a></li><li><strong>Cross-platform</strong> GUI wrapper: <a href="https://github.com/syncthing/syncthing-gtk/releases/latest" target="_blank" rel="noopener">Syncthing-GTK</a></li></ul><p>安卓手机可以去 Google play 搜索。</p><p>我这里主要介绍用 docker 将它装在服务器上面。</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -<span class="ruby">-name=syncthing \</span></span><br><span class="line"><span class="ruby">  -e PUID=<span class="number">1000</span> \</span></span><br><span class="line"><span class="ruby">  -e PGID=<span class="number">1000</span> \</span></span><br><span class="line"><span class="ruby">  -e TZ=Asia/Shanghai \</span></span><br><span class="line"><span class="ruby">  -e UMASK_SET=<span class="number">022</span> \</span></span><br><span class="line"><span class="ruby">  -p <span class="number">8384</span><span class="symbol">:</span><span class="number">8384</span> \</span></span><br><span class="line"><span class="ruby">  -p <span class="number">22000</span><span class="symbol">:</span><span class="number">22000</span> \</span></span><br><span class="line"><span class="ruby">  -p <span class="number">21027</span><span class="symbol">:</span><span class="number">21027</span>/udp \</span></span><br><span class="line"><span class="ruby">  -v /home/syncthing/appdata/<span class="symbol">config:</span>/config \</span></span><br><span class="line"><span class="ruby">  -v /home/syncthing/<span class="symbol">data1:</span>/data1 \</span></span><br><span class="line"><span class="ruby">  -v /home/syncthing/<span class="symbol">data2:</span>/data2 \</span></span><br><span class="line"><span class="ruby">  --restart <span class="keyword">unless</span>-stopped \</span></span><br><span class="line"><span class="ruby">  linuxserver/syncthing</span></span><br></pre></td></tr></table></figure><p>这里开放的 webUI 端口为 8384，所以启动成功后到浏览器输入 <code>IP:8384</code> 即可进入管理界面。因为我们是在服务器上使用，一定要设置用户，不然别人随便输入你的 IP:8384 就可以来管理你的设备了，很不安全。如果是在家里使用的话，例如群晖，或者和我一样使用 小钢炮 ，那不用设置也没多大问题。</p><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>这里的添加用户，可以理解成和微信的添加好友相似。两台设备需要添加好友了才能互相发送文件，而要添加可以使用 <strong>二维码</strong> ，也可以使用 <strong>ID</strong> 。这里我以服务器作为被添加的设备。</p><p>点击右上角的 【操作】➡️【显示 ID 】即可看到。如果手机想添加这台设备，打开应用后，向左滑来到设备这里，点右上角的 ➕ ，然后点击二维码就可以扫码了。如果是电脑，就只能用 ID 的方式来添加了。点右下角的【添加远程设备】然后输入服务器的 ID 即可。</p><h2 id="同步文件"><a href="#同步文件" class="headerlink" title="同步文件"></a>同步文件</h2><p>这里我以手机文件同步到服务器为例。在手机上向右滑来到左边的 文件夹 这里。点击右上角的 ➕ 。文件夹标签可以随便起，目录选择要同步的文件夹，要同步到哪台设备，就把那台设备的开关打开。这样手机端的设置就完成了。</p><p>然后过一会服务器的就会收到通知，我们可以在浏览器的 webUI 里看到，提示某某人分享一个某某文件夹给你，是否接受。接受时可以设置要把这个文件夹放在哪里。</p><p>这样设置好后，就只需要等待了，手机会慢慢地把文件上传到服务器里。因为这个应用是使用 端–端 加密的，所以不用怕被中间人知道你在传输什么，不过可能也是因为这个原因吧，感觉传输的速度不是那么快，最高好像只能达到 2M/s 。</p><p>当然这个过程也是可以反过来的，把服务器的文件同步到手机上。</p><p>我本来是打算尝试一下，把服务器里 qbittorrent 下载好的文件，利用这个应用取回手机。但是，速度实在太慢了，虽然最大时能有 2M/s ，但是大部分时间都是几百 k 的速度。如果设置成服务器下载完，让它同步到我的小钢炮里面就还行，毕竟两台设备都是 24 小时开机。但是手机就没必要了，非要把文件取回手机，我还是选择开启一个临时的 HTTP 服务。</p><h2 id="暂时我的使用方案"><a href="#暂时我的使用方案" class="headerlink" title="暂时我的使用方案"></a>暂时我的使用方案</h2><p>我目前的使用有两个</p><ol><li>把手机的微信下载内容，同步到小钢炮。</li><li>把手机里用 vue 这个软件拍的视频，同步到电脑（用于在电脑剪辑）</li></ol><p>以后想到其它玩法再来更新。</p>]]></content>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nds 游戏存档导入到电脑的模拟器玩</title>
      <link href="/2019/11/nds2desmume/"/>
      <url>/2019/11/nds2desmume/</url>
      <content type="html"><![CDATA[<p>我有这么个需求，之前在 nds 上面用 R4 卡玩的游戏存档，想把它复制到电脑上，然后在电脑上用模拟器继承存档，继续玩之前的进度。但它并不是直接复制过来就可以用的。</p><a id="more"></a><p>用 desmume 这个 nds 游戏模拟器，它在游戏中正常保存后的存档格式为 .dsv</p><p>而用 nds 加 R4 卡来玩游戏，正常保存后，存档文件的后缀为 .SAV </p><p>这样就没法这边打完，就把存档复制到那边，然后继续玩。</p><p>不过现在（其实应该是好几年前了）模拟器已经支持把  .SAV 文件导入模拟器了。有一个选项，可以导入 sav 格式的存档，然后把它转换为 dsv 格式。</p><h2 id="把-nds-的存档复制到模拟器上用"><a href="#把-nds-的存档复制到模拟器上用" class="headerlink" title="把 nds 的存档复制到模拟器上用"></a>把 nds 的存档复制到模拟器上用</h2><p>在菜单里面可以导入存档（import开头的），然后选择sav格式的存档，导入之后将会被转换为 dsv 格式的存档。</p><p>在mac中导入是这样的<br><img src="/img/2019/mac-import.png" alt=""><br>在win中导入是这样的</p><p><img src="/img/2019/win-des.jpg" alt=""></p><p>但是，问题来了，我一开始是在 mac 上用的，导入是成功了，但是游戏中存档位置是空的。百思不得其解，最终我决定到 windows 上试一下。</p><p>果然，只有 windows 版的才行，导入后会跳出一个选项，问要转换为什么类型，我就直接选默认的第一个，就成功在游戏中看到存档了。</p><p>而在 mac 里，导入时并没有这些选择，所以导入后也识别不到，暂时无解。非要在 mac 上玩的话，就只能先在 windows 里导入，再导出（或者复制出 dsv 文件），再把这个 dsv 文件复制到 mac 上面用。</p><h2 id="模拟器的存档复制到-nds-上用"><a href="#模拟器的存档复制到-nds-上用" class="headerlink" title="模拟器的存档复制到 nds 上用"></a>模拟器的存档复制到 nds 上用</h2><p>刚才游戏中有个地方需要多次尝试，用模拟器的快速存档和读档会比较快。所以我把存档复制到电脑上，导入后游玩，用读取大法很快就过了关卡。</p><p>然后我不想一直在电脑用模拟器玩，所以想把存档导出， 复制到 nds 上玩。这个就没什么难度了。选择 <code>Export Rom Save File</code> 然后选择 sav 格式。导出并复制到 nds 的内存卡上即可。</p>]]></content>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 设备 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>即使是使用 ipv6 也最好做好防范，ip6tables 与 ss</title>
      <link href="/2019/11/ip6tables-and-ss/"/>
      <url>/2019/11/ip6tables-and-ss/</url>
      <content type="html"><![CDATA[<p>最近看到好多个人，因为开放群晖的端口号，导致宽带被封，运营商给出的原因是：未备案个人宽带不允许提供 web 服务……</p><a id="more"></a><p>这里有一个案例：<a href="https://koolshare.cn/thread-170517-1-1.html" target="_blank" rel="noopener">重要消息：上海电信对于绑定域名用于WEB服务的 直接封宽带</a></p><p>所以现在哪怕我只是开放给自己使用而已，也不行了。其实之前也是不允许的，不过运营商会把 80 端口和 443 端口给封了，这样我们就无法在家里搭建网站了。不过严格来讲还是可以的，只不过得在域名后面加个端口号，例如这样</p><blockquote><p><a href="http://www.baidu.com:12345" target="_blank" rel="noopener">www.baidu.com:12345</a></p></blockquote><p>但是现在这种也不允许了，而且一经发现，直接封了你的宽带。除非你自己去电信询问，否则都不知道为什么封的。没错，现在只有电信会封，而且看网友的讨论，好像只有 <strong>上海、深圳</strong> 这两个地方的<strong>电信宽带</strong>才会。</p><p>那么我是用 移动宽带 的，我需要担心吗？之前我是觉得不需要担心的，毕竟等网上别人出事的时候，我在网上看到别人的帖子，我再来开启防火墙就行了。</p><p>然而，我又一想，我怎么知道我不会是，移动用户中第一批遭殃的呢？所以我赶紧又打开我路由器的防火墙。</p><p>但我还是想享受外网访问的便捷性，所以我得来想想对策。</p><h3 id="之前的"><a href="#之前的" class="headerlink" title="之前的"></a>之前的</h3><p>我之前的话，是直接关闭防火墙，这样我就可以通过 ipv6 ，在外面访问宿舍的设备，主要有：</p><ol><li>进入路由器查看一下情况</li><li>访问刷了小钢炮系统的斐讯 N1 盒子，查看系统的负载，管理里面 qbittorrent 的下载</li><li>有时候电脑用虚拟机开着一台 Ubuntu 服务器，需要外网 ssh 连接</li></ol><p>所以这上面三台主机里面，我都有运行 ddns 脚本，让它们把自身的 ipv6 地址与我在阿里云申请的域名进行绑定。这样我就可以通过三个不同的域名访问这些主机。但是也麻烦，再添加机器我就得再去添加脚本，并且记住域名，所以我更改了方案。</p><h3 id="现在的"><a href="#现在的" class="headerlink" title="现在的"></a>现在的</h3><p>我直接开启 padavan 系统的路由器里面的 ss_server ，之后我在外面要访问内网的设备时，就用 ss 连接我的路由器，这时就相当于把它当 VPN 来使用。我想要管理路由器，可以直接在浏览器输入 <code>192.168.123.1</code> 而不用去输入域名，管理其它设备也一样，直接输入局域网 IP 即可。</p><p>但是，这一切，还是建立在我把防火墙关闭了的情景下，这样我的宽带还是有被封的风险。我想要开启防火墙，但同时我还可以连接到内网的设备。所以，我了解了一下 <code>ip6tables</code> ，这个是管理 ipv6 的防火墙软件，详情可以看这里 <a href="https://man.linuxde.net/ip6tables" target="_blank" rel="noopener">ip6tables详细使用说明</a></p><p>但我用到不多，现在外界访问只通过一个端口，就是 ss_server 开放的那个端口，默认为 8388 ，所以我只需要开放这个端口即可。需要做的，是通过 ssh 连接路由器，或者直接在 高级设置，系统管理，控制台 输入这 3 条命令。</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">ip6tables -A FORWARD -<span class="selector-tag">p</span> tcp --dport <span class="number">8388</span> -j ACCEPT</span><br><span class="line">ip6tables -A INPUT -<span class="selector-tag">p</span> tcp --dport <span class="number">8388</span> -j ACCEPT</span><br><span class="line">ip6tables -A OUTPUT -<span class="selector-tag">p</span> tcp --dport <span class="number">8388</span> -j ACCEPT</span><br></pre></td></tr></table></figure><p>这样外网就只能通过 8388 这个端口来访问内网，而且只能用 ss 连接才行，直接在浏览器输入我 IP 加 8388 肯定不行，因为我根本没有开启 web 服务。所以应该是不会有宽带被封的风险。</p><p>但是这样有一个问题，就是当我路由器重启之后，就失效了，只能重新到控制台再输入一次。能否让它开机后自动执行呢？</p><p>可以的，需要到【高级设置】——【自定义设置】——【脚本】里添加。由于我使用的是 hiboy 大佬修改的 padavan 系统，所以里面有好几个脚本。如果是其他人的固件估计没这个功能。</p><p>那么这里我可以把上面的三条命令，放在【在路由器启动后执行】这个脚本里，也可以放在【在防火墙规则启动后执行】里。我个人是选择后者。</p><p>将命令粘贴进去后，点击下方的【应用本页设置】即可。这样以后重启路由器后，就会自动执行这三条命令。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>如何让 qBittorrent 在 Linux 上连接更多的 tracker</title>
      <link href="/2019/11/qb-more-tracker/"/>
      <url>/2019/11/qb-more-tracker/</url>
      <content type="html"><![CDATA[<p>对于 Linux 上的 qBittorrent，它不同于我们在 Windows 和 Mac 上的桌面版，我们只能通过 web 来管理，基本的功能都一样，但是有一个问题比较麻烦，就是无法打开<strong>高级设置</strong>里的【总是向所有等级的 Tracker 汇报】。</p><a id="more"></a><p>这对于我们下载 BT 任务，影响就比较大了。</p><p>但是在研究一番之后，我还是成功的开启了这个功能。</p><p>我的思路是这样的，Linux 上的 qb，它有一个配置文件：<code>qBittorrent.conf</code> ，我通过修改这个文件，应该也是可以开启这个功能的。但是，我不知道添加什么语句，才能开启。所以我想到看一下我电脑的 qb 配置文件，来参考一下。</p><p>那么我先查看一下我 Mac 上的配置文件：<code>qBittorrent.ini</code> ，它在用户目录下的隐藏文件夹<code>.config</code>里面，在这个文件里面，我找到了这一句</p><figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">Advanced\AnnounceToAllTrackers=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>它是放在 <code>[Preferences]</code>下面的，那么按理，我在 Linux 上也添加这一句，就可以开启这个功能了。</p><p>Linux 上可能不同的发行版本，它配置文件的位置有可能不同，想我的 N1 小钢炮，它的配置文件是在这的：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">/var/<span class="class"><span class="keyword">lib</span>/<span class="title">qbittorrent</span>/.<span class="title">config</span>/<span class="title">qBittorrent</span>/<span class="title">qBittorrent</span>.<span class="title">conf</span></span></span><br></pre></td></tr></table></figure><p>而我之前用脚本安装的 qb ，它的配置文件是在 home 目录下的某个位置，而如果在 docker 上面，它在容器中的位置可能也不一样吧。所以如果找不到，可以全局搜索一下：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -name qBittorrent.conf</span><br></pre></td></tr></table></figure><p>找到之后，用 vim 编辑这个文件，添加</p><figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">Advanced\AnnounceToAllTrackers=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>保存，重启 qb（不会的话就重启机器）</p><p>然后就成功了，此时 qb 在下 BT 任务时，就可以连接多个 tracker 了。</p>]]></content>
      
      
        <tags>
            
            <tag> 下载 </tag>
            
            <tag> BT </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于玩客云的一些资料</title>
      <link href="/2019/10/about-wankeyun/"/>
      <url>/2019/10/about-wankeyun/</url>
      <content type="html"><![CDATA[<p>玩客云能做什么？1、下载迅雷可以下载的内容。2、当私人网盘来使用，出门在外时，也可访问家中硬盘中的文件。</p><p>那它有什么缺点？最大的缺点是，会不停往硬盘存东西。因此会加大硬盘损耗，以及占用带宽。</p><p>下面是关于玩客云，个人收集的一些资料。</p><a id="more"></a><h2 id="问：现在入手什么版本最好啊？（这个是几个月前的回答了，现在没什么用，一律买最便宜的就行）"><a href="#问：现在入手什么版本最好啊？（这个是几个月前的回答了，现在没什么用，一律买最便宜的就行）" class="headerlink" title="问：现在入手什么版本最好啊？（这个是几个月前的回答了，现在没什么用，一律买最便宜的就行）"></a>问：现在入手什么版本最好啊？（这个是几个月前的回答了，现在没什么用，一律买最便宜的就行）</h2><ul><li><p>看你的用途吧。。。想要挖矿的就去买开了挖矿的，不需要挖矿、只想下载和当网盘用的买退出挖矿的或者未拆封的，要刷机或者装组件(如transmission、apache、nginx、php、mysql等)玩的买root的。</p></li><li><p>之前买了一个全新未拆封的，没有开通链克计划，硬盘是可以休眠的</p></li></ul><h2 id="玩客云限制上传的方法（最好电脑上操作）"><a href="#玩客云限制上传的方法（最好电脑上操作）" class="headerlink" title="玩客云限制上传的方法（最好电脑上操作）"></a>玩客云限制上传的方法（最好电脑上操作）</h2><ul><li><p>1、显示隐藏的文件，看到一个.onething_data的文件夹，删除了。</p></li><li><p>2、打开记事本，什么都不需要，直接另存为—保存类型选择为所有文件，文件名为.onething_data</p></li><li><p>丢到玩客云硬盘的根目录上，设置为只读的属性，完事。</p></li><li><ul><li>反正我这么搞，不会上班，远程访问也没毛病，一天还有0.几个蛋。大不了被绝育，能下载，能当家庭云用就行！</li></ul></li></ul><hr><p>很多人不满玩客云一直读写硬盘的这种行为，于是申请退出玩客链计划，当时想退出却没那么容易。因为迅雷要求你必须手持身份证，拍一张照片给他们，才愿意帮你退出计划。这想想还是挺可怕，谁知道照片会被拿去干什么事啊。但是在 张大妈 有这样一个有趣的例子。</p><p>与客服互怼成功拒绝提供身份证</p><p><a href="https://post.smzdm.com/p/az59706n/" target="_blank" rel="noopener">https://post.smzdm.com/p/az59706n/</a></p><p>同时这上面还有一篇非常详细的评测</p><p><a href="https://post.smzdm.com/p/aw3np922/" target="_blank" rel="noopener">https://post.smzdm.com/p/aw3np922/</a></p><p>B 站上面也有教</p><p><span style="color: rgb(34, 34, 34);">不让其不停读取硬盘的四种方案（</span><a href="https://www.bilibili.com/video/av53589623" target="_blank" rel="noopener">https://www.bilibili.com/video/av53589623</a><span style="color: rgb(34, 34, 34);">）</span></p><ul><li><p><span style="color: rgb(34, 34, 34);">① .onething_data文件夹封闭 具体操作看之前视频</span></p></li><li><p><span style="color: rgb(34, 34, 34);">② 发邮件退出玩客云奖励计划</span></p></li><li><p><span style="color: rgb(34, 34, 34);">③ 用闲置U盘或TF卡做主盘避免写入机械硬盘</span></p></li><li><p><span style="color: rgb(34, 34, 34);">④ 不用时弹出硬盘 使用时远程重启</span></p></li></ul><h2 id="用-Linux-禁止其读写的方法：（此方法本人测试无效，因为玩客云根本不能识别-ext4-格式的硬盘）"><a href="#用-Linux-禁止其读写的方法：（此方法本人测试无效，因为玩客云根本不能识别-ext4-格式的硬盘）" class="headerlink" title="用 Linux 禁止其读写的方法：（此方法本人测试无效，因为玩客云根本不能识别 ext4 格式的硬盘）"></a>用 Linux 禁止其读写的方法：（此方法本人测试无效，因为玩客云根本不能识别 ext4 格式的硬盘）</h2><ul><li><span style="color: rgb(34, 34, 34);">直接第一种覆盖就行 而且他不会改回来 但是需要把硬盘搞成ext4 同时设置该文件的用户组为root 再修改文件属性不可修改 以上操作在linux下进行</span></li></ul><h2 id="挂载到电脑的方法："><a href="#挂载到电脑的方法：" class="headerlink" title="挂载到电脑的方法："></a>挂载到电脑的方法：</h2><ul><li>Win + r 输入 //ip</li></ul><h2 id="我个人对于这台设备的评价"><a href="#我个人对于这台设备的评价" class="headerlink" title="我个人对于这台设备的评价"></a>我个人对于这台设备的评价</h2><p>我认为，对于下载，有这台设备还是不错的，因为它让我们在没有迅雷会员的情况下，也可以高速下载。当然前提是你下载的资源迅雷的服务器里面有。不过随着现在版权管理越来越严，迅雷能下载的东西也越来越少了。</p><p>对于当私人云盘，我看有人专门买两台这个来当私人云盘，不过买的硬盘盒都比机器贵。我个人是不会把手机的图片、视频放这的，不太敢，也没必要。</p><p>所以这台机器对我确实没多大用处，大多数情况下都是出于吃灰状态。不过也无所谓了，五六十块钱的东西，买来折腾折腾过过瘾也就值得了。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>小钢炮又被折腾坏记录，最终成功用上 zsh</title>
      <link href="/2019/10/nano-zsh/"/>
      <url>/2019/10/nano-zsh/</url>
      <content type="html"><![CDATA[<p>刚才给小钢炮安装了 zsh ，这个过程还是有点复杂的，不过好在都能找到教程。</p><a id="more"></a><h2 id="1、先去看灯大的这个文章"><a href="#1、先去看灯大的这个文章" class="headerlink" title="1、先去看灯大的这个文章"></a>1、先去看灯大的这个文章</h2><p><a href="https://gitee.com/8ox86/phicomm-n1-issue/wikis/entware%20guide?sort_id=1368793" target="_blank" rel="noopener">https://gitee.com/8ox86/phicomm-n1-issue/wikis/entware%20guide?sort_id=1368793</a></p><p>让我们可以用 opkg2 来安装其它应用</p><h2 id="2、安装-zsh-与配置集"><a href="#2、安装-zsh-与配置集" class="headerlink" title="2、安装 zsh 与配置集"></a>2、安装 zsh 与配置集</h2><p>于是我就安装了 zsh 以及 oh my zsh 为的就是用这个自动补全插件 zsh-autosuggestions</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">opkg2 <span class="keyword">install</span> zsh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone git:<span class="regexp">//gi</span>thub.com<span class="regexp">/zsh-users/</span>zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span><span class="regexp">/plugins/</span>zsh-autosuggestions</span><br></pre></td></tr></table></figure><h2 id="3、遇坑部分，无法-ssh-连接"><a href="#3、遇坑部分，无法-ssh-连接" class="headerlink" title="3、遇坑部分，无法 ssh 连接"></a>3、遇坑部分，无法 ssh 连接</h2><p>顺利地安装成功了，然后，我想将 zsh 设置为默认的 shell ，使用 chsh -s /opt/bin/zsh 却失败了。</p><p>然后网上找其它方法，看到有个是修改 /etc/passwd 这个文件，第一行就是 root 用户的默认 shell 路径，于是用 vim 修改这个文件，改为 zsh 的路径，然后退出，再重新 ssh 连接，就登录不了了……</p><p><img src="/img/2019/can&#39;t login after edit the passwd.jpg" alt=""></p><p>本想这次扑街了，又得重装系统了，可惜 qb 的配置没有备份……</p><h2 id="4、想办法备份"><a href="#4、想办法备份" class="headerlink" title="4、想办法备份"></a>4、想办法备份</h2><p>于是想办法看看能不能备份出来，不然重装系统后所有记录都没了。想到 qb 的配置文件是放在 /var/lib/qbittorrent 这个文件夹里的，之前我是 ssh 之后，把复制到自己的硬盘的。现在无法 ssh，得另寻方法。</p><p>于是想到小钢炮的 web 界面有个定时任务的功能 Scheduled Tasks ，在这个我也可以执行命令啊，那我在这里备份这个文件夹不就行了。</p><p>同时灯大的 wiki 里也有写备份 qb 和 tr 的方法，他是用 tar 来打包这个文件夹的，这种可能更好吧。</p><p>于是我添加了这条任务，每十五分钟就将这两个文件夹打包备份到我这个叫 one 的硬盘里。</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span> * * * * tar cvf /media/one/qb.tar /var/<span class="class"><span class="keyword">lib</span>/<span class="title">qbittorrent</span> &amp;&amp; <span class="title">tar</span> <span class="title">cvf</span> /<span class="title">media</span>/<span class="title">one</span>/<span class="title">tr</span>.<span class="title">tar</span> /<span class="title">var</span>/<span class="title">lib</span>/<span class="title">transmission</span></span></span><br></pre></td></tr></table></figure><h2 id="5、曲线救国"><a href="#5、曲线救国" class="headerlink" title="5、曲线救国"></a>5、曲线救国</h2><p>所以这样打包好后，就可以重装系统了嘛。不过我突然想到，既然这里可以执行命令，那我在这里修改 passwd 这个文件，改回去不就行了？</p><p>于是我将 passwd 这个文件的内容，输出到硬盘里</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>passwd &gt; <span class="regexp">/media/</span>one<span class="regexp">/pass.txt</span></span><br></pre></td></tr></table></figure><p>接着我用 filebrowser 修改这个文档里面的内容，再把它输入回 passwd</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/media/</span>one<span class="regexp">/pass.txt &gt; /</span>etc<span class="regexp">/passwd</span></span><br></pre></td></tr></table></figure><p>完成，再来 ssh ，就成功登录上了。</p><p>但是我的 zsh 还是没办法设置为默认 shell ……</p><p>怎么办呢？</p><h2 id="6、用上-zsh"><a href="#6、用上-zsh" class="headerlink" title="6、用上 zsh"></a>6、用上 zsh</h2><p>我想到，当我们用 ssh 连接上小钢炮的 sh 时，它会去执行 /etc/prifile 这个文件里面的内容，那我直接在这里面添加一行</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">zsh</span></span><br></pre></td></tr></table></figure><p>我将它放在环境变量之后，在 13 行这个位置。这样之后用 ssh 连接，系统就会先启动 sh ，然后读取 /etc/prifile 的内容，读到 13 行，执行了 zsh 这个命令，然后 shell 就自动切换到 zsh 了。</p><p>由于这个过程很快，我们不可能看到，所以一连接上看到的就是 zsh 了。完美！</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>小米手机免 root 去除广告以及卸载系统应用</title>
      <link href="/2019/09/MIUI-adb/"/>
      <url>/2019/09/MIUI-adb/</url>
      <content type="html"><![CDATA[<p>本文需在电脑上进行。</p><a id="more"></a><h2 id="手机打开-USB-调试"><a href="#手机打开-USB-调试" class="headerlink" title="手机打开 USB 调试"></a>手机打开 USB 调试</h2><p>以及 USB 调试（安全模式）</p><h2 id="下载-ADB-工具"><a href="#下载-ADB-工具" class="headerlink" title="下载 ADB 工具"></a>下载 ADB 工具</h2><p><a href="http://veger.ys168.com/" target="_blank" rel="noopener">http://veger.ys168.com/</a><br>在电脑软件这个文件夹里</p><p>解压后把三个文件，解压到 <code>C:\Windows\</code>里面</p><h2 id="安装小米刷机工具（安装手机驱动）"><a href="#安装小米刷机工具（安装手机驱动）" class="headerlink" title="安装小米刷机工具（安装手机驱动）"></a>安装小米刷机工具（安装手机驱动）</h2><p><a href="http://bigota.d.miui.com/tools/MiFlash2018-5-28-0.zip" target="_blank" rel="noopener">http://bigota.d.miui.com/tools/MiFlash2018-5-28-0.zip</a></p><h2 id="电脑打开-cmd"><a href="#电脑打开-cmd" class="headerlink" title="电脑打开 cmd"></a>电脑打开 cmd</h2><p>删除应用的 ADB 命令是：<br><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> 应用包名</span><br></pre></td></tr></table></figure></p><p>（MIUI 9、MIUI 10 测试删除后能正常开机使用）<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">adb shell pm uninstall --user <span class="number">0</span>  com<span class="selector-class">.miui</span><span class="selector-class">.systemAdSolution</span> （小米系统广告解决方案 必删）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span>  com<span class="selector-class">.miui</span><span class="selector-class">.analytics</span> （小米广告分析，必删）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.xiaomi</span><span class="selector-class">.gamecenter</span><span class="selector-class">.sdk</span><span class="selector-class">.service</span> （小米游戏中心服务）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.xiaomi</span><span class="selector-class">.gamecenter</span> （小米游戏中心）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.sohu</span><span class="selector-class">.inputmethod</span><span class="selector-class">.sogou</span><span class="selector-class">.xiaomi</span> （搜狗输入法）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.player</span> （小米音乐）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.video</span> （小米视频）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.notes</span> （小米便签）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.translation</span><span class="selector-class">.youdao</span> （有道翻译）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.translation</span><span class="selector-class">.kingsoft</span> （金山翻译）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.email</span> （邮件）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.xiaomi</span><span class="selector-class">.scanner</span> （小米扫描）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.hybrid</span> （混合器）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.bugreport</span> （bug 反馈）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.milink</span><span class="selector-class">.service</span> （米连服务）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.browser</span> （浏览器）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.gallery</span> （相册）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.yellowpage</span> （黄页）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.xiaomi</span><span class="selector-class">.midrop</span> （小米快传）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.virtualsim</span> （小米虚拟器）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.xiaomi</span><span class="selector-class">.payment</span> （小米支付）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.mipay</span><span class="selector-class">.wallet</span> （小米钱包）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.soundrecorder</span> （录音机）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.screenrecorder</span> （屏幕录制）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.wallpaper</span> （壁纸）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.voiceassist</span> （语音助手）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.fm</span> （收音机）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.touchassistant</span> （悬浮球）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.cellbroadcastreceiver</span> （小米广播）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.xiaomi</span><span class="selector-class">.mitunes</span> （小米助手）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.xiaomi</span><span class="selector-class">.pass</span> （小米卡包）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.thememanager</span> （个性主题管理）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.wallpaper</span> （动态壁纸）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.android</span><span class="selector-class">.wallpaper</span><span class="selector-class">.livepicker</span> （动态壁纸获取）  </span><br><span class="line">adb shell pm uninstall --user <span class="number">0</span> com<span class="selector-class">.miui</span><span class="selector-class">.klo</span><span class="selector-class">.bugreport</span> （KLO bug 反馈）</span><br></pre></td></tr></table></figure></p><p>前面两个是 MIUI 系统支撑广告及精准化推送的应用，应第一时间删除，删除后不会出现无法开机的情况。这样 MIUI 系统的广告就会少很多——没有验证是否完全屏蔽。  </p><p><strong>【警告】以下系统自带应用删除后必定无法正常开机（来自网络），请避免误删：</strong>  </p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">com<span class="selector-class">.miui</span><span class="selector-class">.cloudservice</span> （小米云服务）  </span><br><span class="line">com<span class="selector-class">.xiaomi</span><span class="selector-class">.account</span> （小米账户）  </span><br><span class="line">com<span class="selector-class">.miui</span><span class="selector-class">.cloudbackup</span> （云备份）  </span><br><span class="line">com<span class="selector-class">.xiaomi</span><span class="selector-class">.market</span> （应用市场）</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>服务器搭建全能下载器 Aria2 以及私人网盘，只需一行命令（docker）</title>
      <link href="/2019/09/docker-aria2/"/>
      <url>/2019/09/docker-aria2/</url>
      <content type="html"><![CDATA[<p>本文将利用 docker 一键安装 Aria2 和 filebrowser。</p><a id="more"></a><p>建议搭配之前的文章来观看：<a href="/2019/08/docker-qb">用服务器来离线下载 BT 种子，体验千兆网络的魅力</a></p><p><a href="https://github.com/wahyd4/aria2-ariang-docker/blob/master/README.CN.md" target="_blank" rel="noopener">项目 GitHub 地址</a></p><h3 id="安装-docker-如果机器没有的话）"><a href="#安装-docker-如果机器没有的话）" class="headerlink" title="安装 docker(如果机器没有的话）"></a>安装 docker(如果机器没有的话）</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">curl -sSL http<span class="variable">s:</span>//<span class="built_in">get</span>.docker.<span class="keyword">com</span>/ | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure><h3 id="最快速启动"><a href="#最快速启动" class="headerlink" title="最快速启动"></a>最快速启动</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">docker run -d --name aria2-ui -v <span class="regexp">/home/</span><span class="string">down:</span><span class="regexp">/data -p 80:80 wahyd4/</span>aria2-ui</span><br></pre></td></tr></table></figure><ul><li>Aria2: <a href="http://yourip/ui/" target="_blank" rel="noopener">http://yourip/ui/</a></li><li>FileManger: <a href="http://yourip" target="_blank" rel="noopener">http://yourip</a></li><li>请使用 admin/admin 进行登录</li></ul><p>这样下载的文件都放在 <code>/home/down</code> 这个文件夹里面</p><p>文件夹没有写入权限，有兴趣看这篇文章了解 <a href="https://note.qidong.name/2018/01/docker-volume-permission/" target="_blank" rel="noopener">文章链接</a><br>不管原理，无脑给予 777</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">777</span> /<span class="built_in">home</span>/down</span><br></pre></td></tr></table></figure><p>强制删除容器</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> rm -f aria2-ui</span><br></pre></td></tr></table></figure><h3 id="加密下载界面"><a href="#加密下载界面" class="headerlink" title="加密下载界面"></a>加密下载界面</h3><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">docker run -d --name ariang \</span><br><span class="line">  -<span class="ruby">p <span class="number">80</span><span class="symbol">:</span><span class="number">80</span> \</span></span><br><span class="line"><span class="ruby">  -e PUID=<span class="number">1000</span> \</span></span><br><span class="line"><span class="ruby">  -e PGID=<span class="number">1000</span> \</span></span><br><span class="line"><span class="ruby">  -e ENABLE_AUTH=<span class="literal">true</span> \</span></span><br><span class="line"><span class="ruby">  -e RPC_SECRET=Hello \</span></span><br><span class="line"><span class="ruby">  -e ARIA2_SSL=<span class="literal">false</span> \</span></span><br><span class="line"><span class="ruby">  -e ARIA2_USER=user \</span></span><br><span class="line"><span class="ruby">  -e ARIA2_PWD=pwd \</span></span><br><span class="line"><span class="ruby">  -v /home/<span class="symbol">down:</span>/data \</span></span><br><span class="line"><span class="ruby">  wahyd4/aria2-ui</span></span><br></pre></td></tr></table></figure><ul><li>用户名：user</li><li>密码：pwd</li></ul><h3 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h3><p>根据个人的需求来选择，如果觉得不需要加密 Aria2 的管理界面的，其实用第一种方式就行了。非常简单，一行命令即可。</p><p>同时也可以结合 APP ：Transdrone_2.5.15.apk 来使用，这个我放在网盘里，使用它来管理多个下载工具也是比较方便的。</p><p><a href="http://veger.ys168.com/" target="_blank" rel="noopener">http://veger.ys168.com/</a></p><p><img src="https://i.loli.net/2019/09/30/SZ4jLRqiB5dzNgF.png" alt="transdrone"></p>]]></content>
      
      
        <tags>
            
            <tag> 下载 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BT挂机利器 transmission docker 安装法</title>
      <link href="/2019/09/transmission-docker/"/>
      <url>/2019/09/transmission-docker/</url>
      <content type="html"><![CDATA[<p>本文主要介绍如何在服务器上安装 docker，并安装 transmission 来下载 BT 种子任务。并且取回本地。</p><a id="more"></a><blockquote><p>要想进行下面的操作，需要有一个服务器，如果你没有的话， <a href="https://www.vultr.com/?ref=8161953-4F" target="_blank" rel="noopener">点此链接注册充值 10 美元送 50 美元</a><br>送的 50美元只有一个月的有效期。（所以不要省，开贵点的机器吧）</p></blockquote><p>上次已经用 docker 安装了 qbittorrent，这是一个非常强大的 BT 软件，我个人是非常喜欢的。但是，它占的内存比较大，如果服务器还要做一些其它的工作，用这个可能就不太合适了。</p><p><img src="https://i.loli.net/2019/09/10/lJAEmdBpbHKe4u5.png" alt="qb speed"></p><p>于是， transmission 是一个不错的选择。它对硬件的配置要求非常的低，甚至在路由器上面都可以运行。</p><blockquote><p>这次使用一台纯净系统的服务器来装。</p></blockquote><h3 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">curl -sSL http<span class="variable">s:</span>//<span class="built_in">get</span>.docker.<span class="keyword">com</span>/ | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure><h3 id="安装-transmission"><a href="#安装-transmission" class="headerlink" title="安装 transmission"></a>安装 transmission</h3><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-<span class="ruby">-restart=always \</span></span><br><span class="line"><span class="ruby">--name transmission \</span></span><br><span class="line"><span class="ruby">-v /home/tr/<span class="symbol">torrents:</span>/to_download \</span></span><br><span class="line"><span class="ruby">-v /home/tr/<span class="symbol">download:</span>/output \</span></span><br><span class="line"><span class="ruby">-p <span class="number">9091</span><span class="symbol">:</span><span class="number">9091</span> \</span></span><br><span class="line"><span class="ruby">-p <span class="number">51413</span><span class="symbol">:</span><span class="number">51413</span> \</span></span><br><span class="line"><span class="ruby">-e USERNAME=admin \</span></span><br><span class="line"><span class="ruby">-e PASSWORD=admin \</span></span><br><span class="line"><span class="ruby">jaymoulin/transmission</span></span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>输入 IP:9091 即可进入 transmission 的管理界面<br>下载后的文件是保存在 <code>/home/tr/download</code> 这个路径下的</p><p>想要取回本地，可以和上一篇文章一样，安装 caddy ，或者也可以使用 FTP 的方法。</p><h3 id="取回本地"><a href="#取回本地" class="headerlink" title="取回本地"></a>取回本地</h3><p>但是下载好后文件是在服务器里，我想把它取回到电脑或者手机。那么，开启一个 http 服务即可。</p><p>这里安装一个 caddy<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/ToyoDAdoubi/doubi/master/caddy_install.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> caddy_install.<span class="keyword">sh</span> &amp;&amp; bash caddy_install.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p><p>写入配置<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="comment">":80 &#123;  </span></span><br><span class="line"> root /home/<span class="keyword">tr</span></span><br><span class="line"> timeouts none  </span><br><span class="line"> gzip  </span><br><span class="line"> <span class="keyword">browse</span>  </span><br><span class="line">&#125;<span class="comment">" &gt; /usr/local/caddy/Caddyfile</span></span><br></pre></td></tr></table></figure></p><p>启动 caddy<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/caddy start</span></span><br></pre></td></tr></table></figure></p><p>开放服务器 80 端口<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">ufw allow <span class="number">80</span></span><br></pre></td></tr></table></figure></p><p>完成后就可以在浏览器里，输入 <code>IP地址</code> 来访问下载好的文件了。如果是 MP4 文件的话，还可以支持在线播放。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>用服务器来离线下载 BT 种子，体验千兆网络的魅力——docker 安装 qBittorrent，以及把文件取回手机</title>
      <link href="/2019/08/docker-qb/"/>
      <url>/2019/08/docker-qb/</url>
      <content type="html"><![CDATA[<p><strong>此教程并不难，只要你会复制粘贴即可。</strong></p><p>🌟🌟🌟搭配视频：</p><p><a href="https://www.bilibili.com/video/av65923774" target="_blank" rel="noopener">用服务器来离线下载 BT 种子，体验千兆网络的魅力</a></p><p><a href="https://www.bilibili.com/video/av84585591/" target="_blank" rel="noopener">利用免费CDN加速取回BT资源</a></p><a id="more"></a><blockquote><p>要想进行下面的操作，需要有一个服务器，如果你没有的话， <a href="https://www.vultr.com/?ref=8161953-4F" target="_blank" rel="noopener">点此链接注册充值 10 美元送 50 美元</a><br>送的 50美元只有一个月的有效期。（所以不要省，开贵点的机器吧）</p></blockquote><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><blockquote><p>使用这家的服务器，是因为它可以随时的删除，不像其它的，一买就得一年。而且，这家还可以选择自动安装 docker ，又节省了一些时间。</p></blockquote><ol><li>点击左边的 billing</li><li>充值方式支持 <strong>支付宝</strong> <strong>微信</strong>（但最少 10 美元）</li><li>充值好后 ，点右边那个 <strong>+</strong> 的圆圈</li><li>然后选择服务器的<strong>地区</strong>（日本和新加坡会比较快，不过有可能连接不上，选美国也可以）</li><li><strong>Server Type</strong>点 <strong>application</strong> ，里面就有 <strong>docker</strong></li><li><strong>Server Size</strong> 就是服务器的配置，越高就越贵。（如果有赠送的 50 美元，那就选那个 40 美元的吧，反正你不花，下个月也没了）</li><li>把下面的 <strong>Enable IPv6</strong> 前面的 框 打钩✅（可以使我们下载时连接到更多的用户）</li><li>然后点击右下角的 deploy now</li><li>等待几分钟……<br>10.就可以看到服务器部署好了，给了一个 ip 地址。</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p> 我们要控制这台服务器，需要用 ssh 工具，这里我用 putty 来演示。</p><blockquote><p>如果用安卓手机的话，可以下载个 <strong>JuiceSSH</strong></p></blockquote><p>有能力的可以去 GitHub 下载：<a href="https://github.com/larryli/PuTTY/releases" target="_blank" rel="noopener">地址</a><br>无法在 GitHub 下载的，可以到我的网盘里下载：<a href="http://veger.ys168.com/" target="_blank" rel="noopener">地址（在『电脑软件』里）</a></p><p>下载后解压，打开 putty<br><img src="https://i.loli.net/2019/08/29/QwXt5dyAIofNHMW.png" alt="putty 连接.png"><br>填上 IP 地址连接</p><p>接着输入用户名和密码。（密码输入时不会显示的）</p><p>连接后输入<br><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull linuxserver/qbittorrent</span><br></pre></td></tr></table></figure></p><p>完成后输入</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">docker create \</span><br><span class="line">  -<span class="ruby">-name=qbittorrent \</span></span><br><span class="line"><span class="ruby">  -e PUID=<span class="number">1000</span> \</span></span><br><span class="line"><span class="ruby">  -e PGID=<span class="number">1000</span> \</span></span><br><span class="line"><span class="ruby">  -e TZ=Aisa/Shanghai \</span></span><br><span class="line"><span class="ruby">  -e UMASK_SET=<span class="number">022</span> \</span></span><br><span class="line"><span class="ruby">  -e WEBUI_PORT=<span class="number">8080</span> \</span></span><br><span class="line"><span class="ruby">  -p <span class="number">8999</span><span class="symbol">:</span><span class="number">8999</span> \</span></span><br><span class="line"><span class="ruby">  -p <span class="number">8999</span><span class="symbol">:</span><span class="number">8999</span>/udp \</span></span><br><span class="line"><span class="ruby">  -p <span class="number">8080</span><span class="symbol">:</span><span class="number">8080</span> \</span></span><br><span class="line"><span class="ruby">  -v /path/to/appdata/<span class="symbol">config:</span>/config \</span></span><br><span class="line"><span class="ruby">  -v /path/to/<span class="symbol">downloads:</span>/downloads \</span></span><br><span class="line"><span class="ruby">  --restart <span class="keyword">unless</span>-stopped \</span></span><br><span class="line"><span class="ruby">  linuxserver/qbittorrent</span></span><br></pre></td></tr></table></figure><p>创建好后再启动<br><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="literal">start</span> qbittorrent</span><br></pre></td></tr></table></figure></p><p>完成后就可以在浏览器里，输入 <code>IP:8080</code> 来访问 qB 了。</p><h2 id="取回本地"><a href="#取回本地" class="headerlink" title="取回本地"></a>取回本地</h2><p>但是下载好后文件是在服务器里，我想把它取回到电脑或者手机。那么，开启一个 http 服务即可。</p><p>这里安装一个 caddy<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/ToyoDAdoubi/doubi/master/caddy_install.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> caddy_install.<span class="keyword">sh</span> &amp;&amp; bash caddy_install.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p><p>写入配置<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="comment">":80 &#123;  </span></span><br><span class="line"> root /path/<span class="keyword">to</span>/downloads</span><br><span class="line"> timeouts none  </span><br><span class="line"> gzip  </span><br><span class="line"> <span class="keyword">browse</span>  </span><br><span class="line">&#125;<span class="comment">" &gt; /usr/local/caddy/Caddyfile</span></span><br></pre></td></tr></table></figure></p><p>启动 caddy<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/caddy start</span></span><br></pre></td></tr></table></figure></p><p>开放服务器 80 端口<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">ufw allow <span class="number">80</span></span><br></pre></td></tr></table></figure></p><p>完成后就可以在浏览器里，输入 <code>IP地址</code> 来访问下载好的文件了。如果是 MP4 文件的话，还可以支持在线播放。</p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>看到有些人评论说用服务器下载会有风险，这个我也是知道的。因为国外的版权保护比较严格，所以有时会监控到你在下载 BT ，如果发现你下载的内容是盗版视频之类的，有可能会对你发出警告⚠️！</p><p>但是，我说过我已经用了一年了，没有碰到过，所以才敢出这个教程。我认为可能和上传有关吧，不用上传太多应该就不太容易被查水表吧。所以我的分享率就设置为 2 而已。</p><blockquote><p>就算你真的被警告了，一般也就是叫你把视频删了而已。如果再严重点，我大不了就把这台服务器删了，然后重新开一台。（就跟我们在网吧里一样，这也是用 vultr 的好处。）</p></blockquote><p>而且，有的人问这个流量的问题，想视频中演示的，最便宜的套餐都有 1000G 流量，而且是上传 1000G，下载也 1000G ，一般使用根本是用不完的，只要设置一下这个分享率，一般是不会用超过的。</p><p><img src="https://i.loli.net/2019/08/30/tVnbi6zFp8SIED4.png" alt="bandi.png"><br>像我这一个月才用 200G ……</p><p>时隔几个月，我发现如今直接从服务器取回文件，速度有时非常的慢，所以我研究下有没有什么对策。暂时知道的有两个：</p><ol><li><p>利用 cloudflare 这个免费的 CDN 来中转，提高下载速度，而且【在特殊时期，服务器被屏蔽时，也可以使用……低调低调】</p></li><li><p>利用国外网盘，将下载好的文件上传到网盘，之后再从网盘取回电脑。【这个步骤有点多，讲起来有点复杂，暂时没计划讲。】</p></li></ol><p>暂时这些……</p>]]></content>
      
      
        <tags>
            
            <tag> 下载 </tag>
            
            <tag> docker </tag>
            
            <tag> BT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>推送到 kindle</title>
      <link href="/2019/04/push-to-kindle/"/>
      <url>/2019/04/push-to-kindle/</url>
      <content type="html"><![CDATA[<p>分别讲三种方法</p><a id="more"></a><h2 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h2><p>关注微信公众号：cn_Kindle<br>绑定自己的亚马逊账号，即可把微信文章或者其它文章网址发送到这个号，即可把内容推送到 kindle 。</p><h2 id="电脑端"><a href="#电脑端" class="headerlink" title="电脑端"></a>电脑端</h2><p>微信电脑版就不讲了。<br><a href="https://fivefilters.org/kindle-it/" target="_blank" rel="noopener">https://fivefilters.org/kindle-it/</a><br>到这个网址将文章地址粘贴，然后点 preview ，出现预览界面，将其显示的邮箱（例如：<a href="mailto:kindle@fivefilters.org" target="_blank" rel="noopener">kindle@fivefilters.org</a>）添加到</p><blockquote><p>已认可的发件人电子邮箱列表</p></blockquote><p>然后填入自己的 kindle 邮箱点 send 。</p><h2 id="多个网页一起推送"><a href="#多个网页一起推送" class="headerlink" title="多个网页一起推送"></a>多个网页一起推送</h2><p>上面的推送都是一次一篇文章的，如果想把多篇文章一起推送到 kindle 可以用这种方法。</p><h3 id="浏览器插件-EpubPress"><a href="#浏览器插件-EpubPress" class="headerlink" title="浏览器插件 EpubPress"></a>浏览器插件 EpubPress</h3><p>这个插件 Chrome 和 Firefox 都有，安装后同时打开多篇文章，再点击这个插件，就可以把这些文章做成 mobi 格式的电子书，可以本地下载，也可以绑定 kindle 邮箱，直接发送到 kindle。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Nginx下修改WordPress固定链接导致无法访问</title>
      <link href="/2019/03/Nginx-WordPress-link-error/"/>
      <url>/2019/03/Nginx-WordPress-link-error/</url>
      <content type="html"><![CDATA[<p>内容来自：<a href="https://blog.csdn.net/csdn1161851523/article/details/52942404" target="_blank" rel="noopener">CSDN</a></p><a id="more"></a><p>先找到配置文件的位置，如我这里是<br><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">/usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/nginx.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>用 vim 来修改，在server{}  字段   中的  “root /websit/wwwroot/;”(这行就是指定网站所在目录的)  这一行的下面 ，添加下面的内容：<br><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">if</span> (-f <span class="variable">$request_filename</span>/index.html)&#123;</span><br><span class="line"><span class="attribute">rewrite</span> (.*) <span class="variable">$1</span>/index.html <span class="literal">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">if</span> (-f <span class="variable">$request_filename</span>/index.php)&#123;</span><br><span class="line"><span class="attribute">rewrite</span> (.*) <span class="variable">$1</span>/index.php;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line"><span class="attribute">rewrite</span> (.*) /index.php;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">rewrite</span> /wp-admin$ <span class="variable">$scheme</span>://<span class="variable">$host</span><span class="variable">$uri</span>/ <span class="literal">permanent</span>;</span><br></pre></td></tr></table></figure></p><p>然后重启 Nginx ，如果和我一样是用 lnmp 的，可以输入<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">lnmp nginx restart</span></span><br></pre></td></tr></table></figure></p><p>之后就可以访问了文章了。</p>]]></content>
      
      
        <tags>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>禁止 mac 在U盘产生隐藏文件</title>
      <link href="/2018/10/mac-hide-file/"/>
      <url>/2018/10/mac-hide-file/</url>
      <content type="html"><![CDATA[<p>自从 U 盘在 mac 上使用一段时间后，我发现里面有好多隐藏文件。<br><a id="more"></a><br>每个都是 4KB。基本上 U 盘里每个文件，都有一个跟它对应的隐藏文件。看来是 Mac 自动生成的，但不知道是用来干什么的，而且平时也没什么影响，毕竟隐藏文件不管在 win 还是 Mac，默认情况下都是不显示的，所以也就没去管它。</p><p>直到，那天 U 盘插别人的电脑，居然被安全软件检测到这些隐藏文件，弹窗说有安全隐患……</p><p>再接着，拿 U 盘去自助打印机，这一堆隐藏文件显示在那里，严重影响我查找要打印的文件的效率。这不能忍。</p><p>于是我百度一下，没有找到方法。再谷歌，就找到了。</p><p>是 Mac 上【聚焦搜索】（spotlight）这个软件造成的，这是一个全局搜索软件。应该是它为了能快速搜索到 U 盘里的文件，所以，当我们在 mac 上往 U 盘传文件的时候，同时会在文件旁边创建一个 4KB 的隐藏文件。</p><h2 id="关闭方法"><a href="#关闭方法" class="headerlink" title="关闭方法"></a>关闭方法</h2><p>打开【系统偏好设置】，第一行倒数第二个的【聚焦】，进去后点【隐私】，然后左下角的【+】，之后选中 U 盘，确认就好了。以后再往 U 盘写入文件就不会有这些隐藏文件了，之前产生的那些可以在 win 下将之删除。（Mac 下在访达里根本无法显示这些文件）</p>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决 ireader 阅读器无法连接电脑问题</title>
      <link href="/2018/10/Solve-the-problem-that-the-ireader-cannot-connect-to-the-computer/"/>
      <url>/2018/10/Solve-the-problem-that-the-ireader-cannot-connect-to-the-computer/</url>
      <content type="html"><![CDATA[<p>今晚把阅读器用 USB 连接电脑，想传些文件。发现连接后，资源管理器无法读到盘符。</p><a id="more"></a><p>由于平时我主要用 Mac 系统，无法用 usb 线与阅读器互传文件的，因此都是用 WIFI 传输。不过之前曾经在虚拟机里运行 XP 系统，可以与阅读器连接并且传输文件，因此硬件是没问题的。</p><p>现在 win10 状态下却无法连接，折腾一番后，没法，联系客服。在掌阅的微信公众号【掌阅iReader】里面，右下角，服务，人工服务。</p><p>一大段话确认我硬件和操作没有问题后，回复我：</p><blockquote><p>若是您的电脑没有识别：请您这边电子书阅读器插上USB连接电脑后右击–我的电脑–属性–点击打开设备管理器截图提供这边帮您查看一下</p></blockquote><p>当阅读器插入后这里面会多出一个设备【Android Phone】，展开它，里面是【Android ADB Interface】。右键，更新驱动。</p><p><strong>重点来了</strong></p><p>不要点【自动搜索……】，而是点下面的【浏览我的计算机以查找驱动程序软件】。</p><p>然后这时会有两个选项，选择下面那个带有【MTP】的，安装这个，然后就完了。资源管理器里可以识别到了。</p><p><img src="https://i.loli.net/2018/10/02/5bb388899cc2d.jpg" alt="IMG_20181002_202702.jpg"></p>]]></content>
      
      
        <tags>
            
            <tag> 设备 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo 换电脑方案</title>
      <link href="/2018/09/hexo-change-computer/"/>
      <url>/2018/09/hexo-change-computer/</url>
      <content type="html"><![CDATA[<p>hexo 搭建博客容易。但是搭建好后只能在这一台电脑上用，这就有点麻烦了。而且要是电脑坏了那且不是完了？所以备份以及恢复很重要。</p><a id="more"></a><p>（当然，windows 下能下载个便携版的 hexo 环境，(<a href="https://portablehexo.bitmoe.cn/" target="_blank" rel="noopener">https://portablehexo.bitmoe.cn/</a>) ，放在 U 盘里面，这样随便到哪里都可以用。这种这里不讨论。）</p><h2 id="备份哪"><a href="#备份哪" class="headerlink" title="备份哪"></a>备份哪</h2><p>用 hexo 搭建博客好后，生成的静态网页是放在（public）这个文件夹里的。正常流程就是把这个文件夹里的内容发布到 github 或者自己的服务器上。而我们要备份的，不是这个，而是整个博客源码，就是（public）的上一层的这整个文件夹。</p><h2 id="如何备份"><a href="#如何备份" class="headerlink" title="如何备份"></a>如何备份</h2><p>那么可以手动复制吗？额，有点难。因为小文件太多，接近一万个，复制要很久。而且文件经常变动，每次变动都再重新复制一份？不现实。</p><p>因此用 <strong>git</strong> 用管理是最好的方法。在博客项目根目录，比如我的博客源码放在 blog 这个文件夹里，那么就用命令行进入这个文件夹，git init 初始化这个项目，将它变成一个仓库，然后就可以把备份到网上了。</p><h2 id="准备新环境"><a href="#准备新环境" class="headerlink" title="准备新环境"></a>准备新环境</h2><p>比如说电脑坏了，或者换了新电脑。要怎么在新的新电脑上继续写博客呢？</p><p>首先得先在新的电脑上安装好运行 hexo 的环境，比如 windows 就得先安装 node.js 和 git，然后再安装 hexo。等可以运行 hexo 并在浏览器显示了，再把刚才备份到网上的博客源码克隆下来。</p><h2 id="克隆之后"><a href="#克隆之后" class="headerlink" title="克隆之后"></a>克隆之后</h2><p>如果顺利的话，此时进入克隆下来的文件夹，再 npm install 一下，应该就可以用了。如果像我这样，发现可以启动，但是打开链接后什么都没显示。那么应该是主题缺失的原因。可以选择重新下载主题，或者在备份的时候把主题也备份到网络。可以参考这篇文章：<a href="https://powersee.github.io/2018/08/about-git-cache/">修复 next 主题无法提交到 git 仓库</a></p>]]></content>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文章中插入服务器的视频</title>
      <link href="/2018/09/add-video-in-post/"/>
      <url>/2018/09/add-video-in-post/</url>
      <content type="html"><![CDATA[<p>在博客上可以用嵌入的方式，引用优酷和 YouTube 的视频，那么可以播放放在网站（服务器）的视频吗？<br><a id="more"></a></p><p>下面依然用这串代码<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">315</span> <span class="attr">width</span>=<span class="string">560</span> <span class="attr">src</span>=<span class="string">'视频的相对路径'</span> <span class="attr">frameborder</span>=<span class="string">0</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在本地的启动 web 服务，然后在浏览器打开，视频可以播放。不错，手机端也可以正常访问。此时将网页和视频文件放置在 GitHub 上，同样可以播放。但是有个缺点，一打开就自动播放，不知道怎么关闭。</p><p>后来了解到用 video 标签的话，就可以设置它不自动播放，并且如果想让视频能够自动适应大小，只需要加上 div 标签就行。如下面这样<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">src</span>=<span class="string">"视频路径"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><div width="100%"><br><video height="100%" width="100%" src="/misc/1.mp4" controls="controls"></video><br></div>]]></content>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ireader阅读器与掌阅APP对比</title>
      <link href="/2018/08/ireader-vs-APP/"/>
      <url>/2018/08/ireader-vs-APP/</url>
      <content type="html"><![CDATA[<p>近日买了个 ireader light 青春版。是一款类似 kindle 的电子阅读器，不过性价比高，功能体验也比较好。所以综合了解后我选择了它。<br><a id="more"></a><br>因为是掌阅出的，那么功能就和在手机下载个 掌阅APP 差不多。主要还是看中它的墨水屏，据说墨水屏看久不易伤眼睛。其它的也是有些不同的。</p><h2 id="阅读器独有的"><a href="#阅读器独有的" class="headerlink" title="阅读器独有的"></a>阅读器独有的</h2><ul><li><p>阅读器书城的图书价格和掌阅APP价格，总体价格保持一致。阅读器书城为回馈书友，每周会有特价书目，仅限阅读器书友享有。</p></li><li><p>无广告。这点其实不怎么值得提，因为手机有些定制版的也是无广告的。比如 OPPO vivo 这两个牌子的手机，自带的定制版的掌阅好像就是无广告的。而阅读器其实也就是一个定制版的掌阅APP，装在一个墨水屏平板里面罢了。况且我花了几百块买了这个只能阅读的机器，倘若得和手机免费下载一个APP一样，忍受着广告，这说得过去吗？</p></li><li><p>传送资料。这个功能说是主打微信文章推送，就是可以把公众号文章，弄到阅读器里面来阅读。流程是先关注它的公众号，绑定手机，然后再来阅读器用手机号登录。之后看到文章，复制它的链接，发送给公众号，阅读器就能收到这条链接。可见只是把文章网址发过去罢了，因此其它链接应该也是可以的。我试了一些博客文章，有英文的和中文的，发现有时候图片会加载不出来，全英文排版也还可以，故没图片或者图片少的文章，推送到阅读器里面再来观看，体验还是不错的。然后知乎的回答也可以推送到此。这个功能体验几次后我还是挺喜欢的。</p></li><li><p>阅读时长奖励代金券。这个并非手机端同有的 『阅读30分钟奖励5代金券』，而是阅读器里『我的，福利，时长福利』，（手机端我找不到这个，所以应该是阅读器特权吧）。这个一个星期算一次，阅读不同时间领取不同代金券，888分钟为最高，达到的话，全部领取有几百代金券。</p></li></ul><h2 id="手机独有的（或者说阅读器还没有的）"><a href="#手机独有的（或者说阅读器还没有的）" class="headerlink" title="手机独有的（或者说阅读器还没有的）"></a>手机独有的（或者说阅读器还没有的）</h2><ul><li><p>读完写评论。手机端看完一本书，可以给它评星级和写评论，而阅读器看完了就只出现：全书完。因此在阅读器看完，我得回到手机，翻到最后一页，再点一下，出现写书评的界面再来写。不写过段时间都不知道这本书有没有看完……</p></li><li><p>杂志往期。手机端打开一本杂志，右上角有个『往期』，这个非常方便，看完就能继续下载下一本。阅读器应该只能去书城里面搜索吧。</p></li></ul><p>阅读器的系统是可以升级的，所以我觉得未来应该会有越来越多的功能加进来。不过现在有些功能只有手机有，阅读器没有，有些不太方便。其它的暂时对我好像没多大影响。</p>]]></content>
      
      
        <tags>
            
            <tag> 设备 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jekyll 与 hexo 的对比</title>
      <link href="/2018/08/jekyll-vs-hexo/"/>
      <url>/2018/08/jekyll-vs-hexo/</url>
      <content type="html"><![CDATA[<p>jekyll 和 hexo 的差别呢，就是 jekyll 可以直接在 GitHub 上面写文章，而 hexo 则需要在电脑里面写好再上传上来。<br><a id="more"></a><br>前面平台搭建的部分可以说是差不多的，搭建好同样传到 GitHub 上，jekyll 是把博客源码传上来，而 hexo 则是先在电脑里生成 html 的静态文件，再将这些传上来。</p><p>也因为这样，hexo 的备份会比较麻烦一点。而 jekyll 则可以说本来就自带备份（针对于像我这种使用 git pages 的人来说）。因为 jekyll 本身就是把整个博客都上传的。</p><p>不仅备份方便，编辑修改也方便，因为文件都在 GitHub 上，可以直接用浏览器登录 GitHub ，直接更改文章源文件就能修改博客文章，在上面新增 Markdown 文件就能往博客添加新文章。</p><p>但是呢，jekyll 不能像 hexo 一样使用命令行 <code>hexo new &#39;title&#39;</code> 来生成文章模板。因此用这个来写文章的话，就得自己打文章开头的那些设置，如这些</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">jekyll</span> <span class="string">与</span> <span class="string">hexo</span> <span class="string">的对比</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-08</span><span class="bullet">-05</span> <span class="number">21</span><span class="string">:02:07</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>因此这个感觉也算是劣势吧。当然复制粘贴上一篇文章的，然后修改一下也不会用太久的时间。但还是能自动生成方便啊。</p><p>因此在这上面写好像也没见得有多爽……</p>]]></content>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>电脑拔网线一天体验</title>
      <link href="/2018/08/one-day-computer-no-network/"/>
      <url>/2018/08/one-day-computer-no-network/</url>
      <content type="html"><![CDATA[<p>13 号晚上的 23:30 左右，我拔掉了路由器 wan 口的网线，这样我电脑和手机都无法通过它来上网了。到现在已经 24 个小时了。</p><a id="more"></a><h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>本来想试试断网一天是什么体验的，因为我经常意识到，无缘无故一天就过去了，我好像什么都没干啊，好像浪费很多时间在网上闲逛。虽有时意识到会自制下，但效果不太明显。</p><p>但我有自知之明，不可能完全断网的，太难做到了。于是，我还可以用手机开数据上网。</p><h2 id="那么这-24-小时左右，我干了什么呢？"><a href="#那么这-24-小时左右，我干了什么呢？" class="headerlink" title="那么这 24 小时左右，我干了什么呢？"></a>那么这 24 小时左右，我干了什么呢？</h2><ul><li>看了几集《老友记》，其实下载挺久的了，有时就看一两集这样，其实这一天好像就看了三集吧。虽然电脑里也有下载好的电影，不过没去看。</li><li>练练 Python，这个最近又接着开始学了，还是一头雾水。毕竟从图书馆借的这本书也不厚，还是坚持看并跟着练吧。</li><li>看 Rick West 的文章，其实我也不认识他，看别的博主说他是大神，并且推荐他的文章，于是就去看看，应该是英国人，一个 web developer。因为文章都是英文的，我把他一共接近 10 篇文章看完了，也就消去了不少的时间。</li><li>然后呢，也看阮一峰老师的博客，挺厉害的，从 2003 年写博客到现在，看他的文章还是有挺多东西学的。</li><li>接着就是日常的 知乎 和 v2ex 咯。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实最终还是大部分时间都是在网上，只是从电脑转移到手机罢了。不过也是因为是在手机，能干的事并不多，所以才能看这么多的文章。要是在电脑上肯定不行，因为它能做的事太多了，容易在这事时张那事，导致能集中精力做一件事，因此效率也很低。</p><p>总之，还是一次挺不错的体验的。下次试试能不能完全断网体验一下。</p>]]></content>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>修复 next 主题无法提交到 git 仓库</title>
      <link href="/2018/08/about-git-cache/"/>
      <url>/2018/08/about-git-cache/</url>
      <content type="html"><![CDATA[<p>修复 git 仓库内，有另一个仓库，而产生冲突的问题。</p><a id="more"></a><p>用 hexo 来部署博客，只是把生成的静态网页给发布上去。但完整的备份是需要备份博客源码的，很多人会新建一个项目来放置博客源码。这样每次写好文章更新博客后，再把源码更新到远程仓库，例如 github 就行。完美备份。</p><p>但是，我发现我的 Next 主题下的文件全部无法上传，官方自带的主题就行。于是想到，当前这整个博客文件夹都是一个 git 仓库，而 next 主题是从 github 上克隆下来的，也是一个仓库，估计是会产生冲突。</p><p>于是，进入到 next 目录下，用命令行<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">rm</span> <span class="selector-tag">-rf</span> <span class="selector-class">.git</span></span><br></pre></td></tr></table></figure></p><p>删除掉 <code>.git</code> 这个文件夹。这样应该就把这个仓库变成一个普通的文件夹了吧。于是再来把它添加到博客源码这个项目里吧<br><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><br></pre></td></tr></table></figure></p><p>结果不行，报错了，显示：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">fatal:</span> <span class="keyword">in</span> unpopulated subnodule <span class="string">'themes/next'</span></span><br></pre></td></tr></table></figure></p><p>看来不只是删除一个文件夹就行。好像还得再清除下，先返回上一级目录，<code>cd ..</code> 后就是在 themes 这个目录下咯，再执行<br><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">git rm -r –cached /<span class="keyword">next</span></span><br></pre></td></tr></table></figure></p><p>去掉已经托管的文件，然后提交即可。</p><p>此时再输入<br><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><br></pre></td></tr></table></figure></p><p>就可以了。<br>之后再 commit，并成功同步到远程仓库。</p>]]></content>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>光之子 去年录制游戏全程</title>
      <link href="/2018/08/child-of-light/"/>
      <url>/2018/08/child-of-light/</url>
      <content type="html"><![CDATA[<p>这个游戏是去年这个时候录的，是我第一个全程录完的游戏。当时是在 PSV 上先玩一段，再到 PS4 上重玩这一段并录制下来的。<br><a id="more"></a></p><p>下面的视频是用这样的代码的。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">315</span> <span class="attr">width</span>=<span class="string">560</span> <span class="attr">src</span>=<span class="string">'https://player.youku.com/embed/视频的ID在这里替换=='</span> <span class="attr">frameborder</span>=<span class="string">0</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="01"><a href="#01" class="headerlink" title="01"></a>01</h3><iframe height="315" width="560" src="https://player.youku.com/embed/XMjk4MjgyMDk3Mg==" frameborder="0" allowfullscreen></iframe><h3 id="02"><a href="#02" class="headerlink" title="02"></a>02</h3><iframe height="315" width="560" src="https://player.youku.com/embed/XMjk4Mjg1MDM4NA==" frameborder="0" allowfullscreen></iframe><h3 id="03"><a href="#03" class="headerlink" title="03"></a>03</h3><iframe height="315" width="560" src="https://player.youku.com/embed/XMjk4NjMxOTc4NA==" frameborder="0" allowfullscreen></iframe><h3 id="04"><a href="#04" class="headerlink" title="04"></a>04</h3><iframe height="315" width="560" src="https://player.youku.com/embed/XMjk4NjQ1NTAwNA==" frameborder="0" allowfullscreen></iframe><h3 id="05"><a href="#05" class="headerlink" title="05"></a>05</h3><iframe height="315" width="560" src="https://player.youku.com/embed/XMjk4Nzk4NjU3Mg==" frameborder="0" allowfullscreen></iframe><h3 id="06"><a href="#06" class="headerlink" title="06"></a>06</h3><iframe height="315" width="560" src="https://player.youku.com/embed/XMjk4OTI5MzY3Ng==" frameborder="0" allowfullscreen></iframe><h3 id="07"><a href="#07" class="headerlink" title="07"></a>07</h3><iframe height="315" width="560" src="https://player.youku.com/embed/XMjk4OTU4NDgxMg==" frameborder="0" allowfullscreen></iframe><h3 id="08"><a href="#08" class="headerlink" title="08"></a>08</h3><iframe height="315" width="560" src="https://player.youku.com/embed/XMjk5Mjc4ODgyOA==" frameborder="0" allowfullscreen></iframe><h3 id="09"><a href="#09" class="headerlink" title="09"></a>09</h3><iframe height="315" width="560" src="https://player.youku.com/embed/XMjk5NDgwMjQzMg==" frameborder="0" allowfullscreen></iframe><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><iframe height="315" width="560" src="https://player.youku.com/embed/XMjk5ODgyMTMxMg==" frameborder="0" allowfullscreen></iframe>]]></content>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VPS离线下载文件最简易方案</title>
      <link href="/2018/08/offline-download/"/>
      <url>/2018/08/offline-download/</url>
      <content type="html"><![CDATA[<h3 id="所使用的工具："><a href="#所使用的工具：" class="headerlink" title="所使用的工具："></a>所使用的工具：</h3><ul><li>Aria2</li><li>caddy</li><li>AriaNg<a id="more"></a></li></ul><p>脚本来自<strong>逗比根据地</strong></p><h3 id="首先安装-下载工具–-Aria2"><a href="#首先安装-下载工具–-Aria2" class="headerlink" title="首先安装 下载工具– Aria2"></a>首先安装 下载工具– Aria2</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/ToyoDAdoubi/doubi/master/aria2.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> aria2.<span class="keyword">sh</span> &amp;&amp; bash aria2.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p>按 1 ，就可以安装。成功后会看到这样的显示。<br><img src="/img/2018/Aria2-done.png" alt="image"></p><p>由于我们用 ssh 登录 vps 后，默认是在 root 目录下。因此我想让下载位置也在这之下，方便以后用命令行删除文件。</p><p>因此需先创建文件夹</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mkdir -<span class="selector-tag">p</span> web/down</span><br></pre></td></tr></table></figure><p>然后进入 Aria2 来需改下载位置和密码</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./aria2.sh</span></span><br></pre></td></tr></table></figure><p>选择 7. 修改 配置文件</p><p>再选择 4.  修改 Aria2 密码+端口+文件下载位置</p><p>密码就个人按喜好改了(后面要用到)，端口就不改了，按回车键使用默认即可，下载位置就改为新的路径</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/root/</span>web<span class="regexp">/down</span></span><br></pre></td></tr></table></figure><p>再次看到 ==Aria2 启动成功 !  == 这部分就完成了。</p><hr><h3 id="安装使用界面"><a href="#安装使用界面" class="headerlink" title="安装使用界面"></a>安装使用界面</h3><p>下载工具安装完成了，那要怎么用它呢？难道用命令行来下载文件？虽然确实可以，不过这有点……</p><p>还是图形界面比较任性化，点点几下就行。</p><h4 id="安装-web-服务器-caddy"><a href="#安装-web-服务器-caddy" class="headerlink" title="安装 web 服务器 caddy"></a>安装 web 服务器 caddy</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/ToyoDAdoubi/doubi/master/caddy_install.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> caddy_install.<span class="keyword">sh</span> &amp;&amp; bash caddy_install.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><h4 id="写入配置到-Caddy-配置文件"><a href="#写入配置到-Caddy-配置文件" class="headerlink" title="写入配置到 Caddy 配置文件"></a>写入配置到 Caddy 配置文件</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="comment">":80 &#123;</span></span><br><span class="line"> root /root/web</span><br><span class="line"> timeouts none</span><br><span class="line"> gzip</span><br><span class="line"> <span class="keyword">browse</span></span><br><span class="line">&#125;<span class="comment">" &gt; /usr/local/caddy/Caddyfile</span></span><br></pre></td></tr></table></figure><h4 id="下载-AriaNg"><a href="#下载-AriaNg" class="headerlink" title="下载 AriaNg"></a>下载 AriaNg</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd web &amp;&amp; wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/mayswind/</span>AriaNg<span class="regexp">/releases/</span>download<span class="regexp">/0.4.0/</span>aria-ng-<span class="number">0.4</span>.<span class="number">0</span>.zip &amp;&amp; unzip aria-ng-<span class="number">0.4</span>.<span class="number">0</span>.zip</span><br></pre></td></tr></table></figure><p>这里出错的话，可能是因为没有安装 unzip 这个应用，根据提示安装下即可。</p><h4 id="启动-caddy"><a href="#启动-caddy" class="headerlink" title="启动 caddy"></a>启动 caddy</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/caddy start</span></span><br></pre></td></tr></table></figure><hr><h3 id="下载文件并取回本地"><a href="#下载文件并取回本地" class="headerlink" title="下载文件并取回本地"></a>下载文件并取回本地</h3><p>这时候就可以用浏览器，通过 IP 或者域名来访问下载界面。需要设置一下。<br><img src="/img/2018/AriaNg.png" alt="image"></p><p>第一个红圈可以填 IP 和域名，都行的。第二个红圈就是填刚才设置的密码了。</p><p>连接上会有左下角有绿色的已连接提醒。然后就可以下载文件了，也可以下载种子。</p><p>下载完就在我们的 vps 里面，那要怎么取回本地呢？只需要在浏览器地址栏里，在  IP 或者域名后面加上 /down 就行。例如</p><blockquote><p>115.152.148.55/down</p></blockquote><p>就会显示下载的那些文件。</p><hr><p>这个方法呢，是我个人觉得比较简易的，比较适合我自己的。下载完就在命令行里用</p><blockquote><p>rm -rf web/down/*</p></blockquote><p>来删除所有的文件。</p><p>因此也就不去搞那些需要 PHP 的了。也因为下载完就删除，所以也没必要设置需要密码才能访问文件列表。</p>]]></content>
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PSV存档管理器 savemgr 使用经验</title>
      <link href="/2018/08/savemgr/"/>
      <url>/2018/08/savemgr/</url>
      <content type="html"><![CDATA[<p>savemgr，存档管理器，在 Github 上项目名称为：vita-savemgr<br><a id="more"></a><br>项目地址：<a href="https://github.com/d3m3vilurr/vita-savemgr" target="_blank" rel="noopener">https://github.com/d3m3vilurr/vita-savemgr</a></p><p>作用：备份还原存档，分享存档给别人，使用他人存档。</p><p>使用方法：（#本文只讲v2.0正式版）那么首先下载这个安装包，之后在PSV上面打开安装。</p><blockquote><p><a href="https://github.com/d3m3vilurr/vita-savemgr/releases/download/2.0.0/savemgr.vpk" target="_blank" rel="noopener">https://github.com/d3m3vilurr/vita-savemgr/releases/download/2.0.0/savemgr.vpk</a></p></blockquote><p>完成之后PSV桌面就有这个图标了。打开，选择一个游戏，然后出现四个选项。分别是 备份，恢复，删除，格式化。看字面意思很容易懂其作用。</p><p><img src="/img/2018/savemgr.jpg" alt="软件截图"></p><p>比如我要备份空之轨迹sc这个游戏存档（游戏编号为 PCSH10060）。点击这个游戏，备份，选择一个位置，如第七个。之后存档就会备份到</p><blockquote><p>ux0:data/savegames/PCSH10060/SLOT7</p></blockquote><p><img src="/img/2018/savegamepath.jpg" alt="备份路径"></p><p>这里。把这个文件夹放在别的PSV的这个路径，别人再使用存档管理器恢复存档，即可以使用我们分享出来的存档。同理，我们也可以这样使用别人的存档。</p><hr><p>　　问题：使用 savemgr 一备份就报错。</p><p>　　其实这才是我一开始要写的内容。因为用0.8版本，导致档案损坏，以至于我整个游戏重新安装。于是我就上网下载了个2.0汉化版，却出现 一备份就报错 的情况。关机重启也还是一样。</p><p>　　然后去 Github 下载7月1号更新的最新版本，还是一样。看看issue里面，也有人是这种情况，没法解决。但是发现了用原装2.0版本的话，安装好以后，机子重启一下就能正常使用了。备份恢复都可以。</p><p>　　吐槽：我网上查了很多，发现很少有人给官方的下载地址，github的直链，大多数都是给个百度云……感觉还是给像<br><a href="https://github.com/d3m3vilurr/vita-savemgr/releases/download/2.0.0/savemgr.vpk" target="_blank" rel="noopener">https://github.com/d3m3vilurr/vita-savemgr/releases/download/2.0.0/savemgr.vpk</a><br>这样好吧，直接浏览器就能下载，而且不用怕链接失效。最重要的是，我能知道这个是从哪里来的。</p>]]></content>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分析网络兼职诈骗过程</title>
      <link href="/2018/07/analysis-cheating-process/"/>
      <url>/2018/07/analysis-cheating-process/</url>
      <content type="html"><![CDATA[<p>此类消息一般多见于 QQ 群，毕竟对于个人来说，这个应该算是最大的曝光率了。<a id="more"></a>可见其宣传手段以 QQ 群为主。（后面我去加入，管理员的要求也印证了这一点）</p><p>从网络得知了一个 QQ 群号，我去加入。之后联系管理员了解工作。这时她的 QQ 性别一般都是女性，美女头像，20 多岁。（至于真假呢，呵呵。）然后她就会开始介绍工作，例如刷单、打字或者快递单录入，都会强调其简单、时间自由、收益不错等。之后问你要不要加入？回答要，然后就说需要帮她宣传，自然就是转发 QQ 群了。而我昨天的尝试，发现现在还得发空间说说和微信朋友圈了。</p><p>很不容易宣传完了，再联系她。这时就会说可以了，得去听一个老师的课，培训完才能工作。以前是 QT 语音和 YY 语音，现在可能这些不能用了吧，改成了第三方软件，估计是自己专门开发的。（应该是，我后来又去登录一次，这个软件连自己名称都不能改，只有那些‘老师’才能改你的名称。）注册好帐号之后，登录上去，等人差不多了，就开始讲了。先装模作样地介绍怎么工作，balabala 一堆之后。就开始要钱了，说需要花一百块左右买一个激活码，然后才能有一个工号，才可以接任务。然后就是各种游说。</p><p>这个时候，大多数人会在这放弃，但是此时想起之前转发这些也很不容易，甚至因为这个而被很多个 QQ 群踢了。此时放弃，岂不是前功尽弃了？或许有人就因此而选择了去交钱。而有的就还有些犹豫，于是去问之前那个介绍人。（例如我就去问，之前不是说不用交钱吗？）此时介绍人就会说，你放心啦，这个每个人都交的，我也交了，待会做几个任务就拿回来了。然后就发一些截图过来，证明她的话。这时就又增加了交钱的可能性。</p><p>那么，有人也许会想，交就交嘛，反正一会就拿回来了。然而，呵呵→_→。等交了钱，准备去完成那几个新手任务，这时这个老师就会让你去另一个老师那。来到新老师这，你以为可以开始了吗？不行的，接下来会说，你这是普通会员，只能接普通任务，要再交 298 成为钻石会员……又 balabala 之类，这时我相信大多数人会发现自己被骗了的。</p><p>但是，还是会有人想着，唉，前面都交钱了，这是放弃那钱不就打水漂了吗？所以还真有人又交了。这时据说就真的完成了，（只是据说，我并不清楚，好像也有继续要求交很多钱的。）可以接任务了。然后就准备大干一场吧。……过了不久，就会发现，一天耗费不少的精力，最后大概能赚个几块钱。又或者得经常去注册什么什么帐号，绑定银行卡身份证之类的。要把本钱赚回来基本不可能。</p><p>之后有人估计就算了，当作花钱买教训吧。而有的人呢，发现唯一能赚回本的方式，就是去拉人，据说拉人那人交的钱，有 70%能归拉人者，也就是客服。于是，一个新的客服就此诞生……</p>]]></content>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>推荐一款手机写作软件——纯纯写作</title>
      <link href="/2018/07/purewrite/"/>
      <url>/2018/07/purewrite/</url>
      <content type="html"><![CDATA[<p>我现在就是在使用这款软件写这篇文章。今晚本来是在 <strong>play 商店</strong> 看日记软件的。然后推荐那里出现了这款软件，看介绍和评价不错，就下载来试试。<a id="more"></a> 这款软件是国人开发的，因此在国内的手机应用商店应该是可以下载到的，试了下小米的是搜索得到的。</p><h2 id="推荐它的理由："><a href="#推荐它的理由：" class="headerlink" title="推荐它的理由："></a>推荐它的理由：</h2><ul><li>好看</li><li>无广告</li><li>自动备份，数据安全</li><li>安装包小，只有 2.7M</li><li>无后台偷运行担忧</li><li>对我来说很实用</li></ul><p>主要是能帮我节省时间，比如在中英文之间插入空格，还有支持 markdown 语法，这也挺不错，比如能让我方便文章 markdown 化。还有首行缩进和段落之间自动加空格，这能让我少打了无数个空格。 总之，对这个软件真有种相见恨晚的感觉。</p><hr><h2 id="下面这些是官方对它的介绍"><a href="#下面这些是官方对它的介绍" class="headerlink" title="下面这些是官方对它的介绍"></a>下面这些是官方对它的介绍</h2><ol><li>这是一个快速的纯文本编辑器，我们希望写作能够回到原本的样子：纯粹、有安全感、随时、绝对不丢失内容、具备良好的写作体验。</li><li>纯纯写作实现了在 Android 上完美的行间距和段间距，它能够使您的文本看起来更加舒适，清晰。同时，它还实现了顺滑滚动、下滑关闭输入法软键盘，以及许多喜人的细节内容。</li><li>蕴繁于简，您能够最快速度达到灵感页面，能够随时随地中断和继续写作，能够使用指纹加密您的文本，能够轻易、快速将文本分享发送到其他 App，这些我们都已经为您做好了。</li><li>最重要的，在使用这个编辑器时，它将会保证您的内容永远不会丢失，除非您主动将它清空。否则即使误操作将文本删除，或瞬间断电，您仍然能够从历史记录中将它恢复。</li><li>当您完成一篇文章写作之后，可以选择 右上角发送按钮 将它发送到另外的 App。</li></ol>]]></content>
      
      <categories>
          
          <category> 手机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建一个聊天室——rocket.chat</title>
      <link href="/2018/07/rocket-chat/"/>
      <url>/2018/07/rocket-chat/</url>
      <content type="html"><![CDATA[<p>Rocket.Chat 是一款开源软件。<br>项目地址：<a href="https://github.com/RocketChat/Rocket.Chat" target="_blank" rel="noopener">https://github.com/RocketChat/Rocket.Chat</a><br><a id="more"></a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>我是在 Ubuntu 18.04 纯净系统下使用的<br>用 snap 安装</p><pre>snap install rocketchat-server</pre><h4 id="联结-caddy"><a href="#联结-caddy" class="headerlink" title="联结 caddy"></a>联结 caddy</h4><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">sudo rocketchat-<span class="keyword">server</span>.initcaddy</span><br></pre></td></tr></table></figure><p>编辑 Caddyfile 文件</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">nano <span class="regexp">/var/</span>snap<span class="regexp">/rocketchat-server/</span>current<span class="regexp">/Caddyfile</span></span><br></pre></td></tr></table></figure><p>将  http://:8080 为你的网站,如 powersee.tk</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//powersee.tk</span></span><br><span class="line">proxy / <span class="string">localhost:</span><span class="number">3000</span> &#123;</span><br><span class="line">  websocket</span><br><span class="line">  transparent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再重启</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart snap<span class="selector-class">.rocketchat-server</span><span class="selector-class">.rocketchat-caddy</span></span><br></pre></td></tr></table></figure><p>那么此时访问网址就能进入聊天室了<br> 因为此处用 SSL 的话，我试了好多次，只能搞自签证书，而这样在手机客户端又没办法连接，因此不演示。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>第一次进入注册的账号会成为管理账号。<br>进入后是英文的，可以设置为中文。<br>点击导航栏的三个点，进入管理界面</p><p>然后在里面可以找到设置语言的地方</p><h4 id="手机端登录"><a href="#手机端登录" class="headerlink" title="手机端登录"></a>手机端登录</h4><p>第一次进入会出现这个界面<br>(让你输入网址)<br>因为我没有使用 SSL，因此得点那个倒三角，选择 http:// 然后再输入网址，如我的 powersee.tk<br>再用账号密码登录即可。同个账号在多平台是可以同时在线的。</p><h4 id="手机客户端下载"><a href="#手机客户端下载" class="headerlink" title="手机客户端下载"></a>手机客户端下载</h4><p>去 play 商店 下载<br>GitHub下载:下载 armv7 版本的到手机安装，x86版本的则到平板。<a href="https://github.com/RocketChat/Rocket.Chat.Cordova/releases/" target="_blank" rel="noopener">https://github.com/RocketChat/Rocket.Chat.Cordova/releases/</a><br>总体而言，还是挺有趣的。</p>]]></content>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>申请教育邮箱–芝加哥城市学院</title>
      <link href="/2018/07/edu-email-Chicago/"/>
      <url>/2018/07/edu-email-Chicago/</url>
      <content type="html"><![CDATA[<p>今天看到别的博主更新文章，然后就去试试，最后成功申请到了。</p><p>这个填的资料比较少，而且申请通过速度非常快。还是挺不错的。</p><a id="more"></a><p>申请地址:<a href="https://applycredit.ccc.edu/" target="_blank" rel="noopener">https://applycredit.ccc.edu/</a></p><p>美国人信息自动生成地址:<a href="http://www.haoweichi.com" target="_blank" rel="noopener">http://www.haoweichi.com</a></p><p>我申请不到一个小时就通过了，但是通过后账号还不能立即使用，再等一个多小时回来就可以用了。</p><p>可以使用 office365 ，然后 OneDrive 有 1T 的空间。</p><p>具体操作做个视频吧。</p><p>视频地址：<a href="https://www.bilibili.com/video/av27063977" target="_blank" rel="noopener">B 站传送</a></p><p>参考文章：<a href="https://www.xzymoe.com/city-colleges-of-chicago-edu-email/" target="_blank" rel="noopener">xzymoe 的博客</a></p>]]></content>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用lnmp搭建wordpress</title>
      <link href="/2018/06/install-wordpress-with-lnmp/"/>
      <url>/2018/06/install-wordpress-with-lnmp/</url>
      <content type="html"><![CDATA[<p>#发现1.5正式版更新了，我自己也试了，所以现在把原来命令行里的 1.4 全部都换成 1.5 了</p><h3 id="一，安装lnmp-Nginx-MySQL-PHP-环境"><a href="#一，安装lnmp-Nginx-MySQL-PHP-环境" class="headerlink" title="一，安装lnmp(Nginx/MySQL/PHP)环境"></a>一，安装lnmp(Nginx/MySQL/PHP)环境</h3><blockquote><p>wget <a href="http://soft2.vpser.net/lnmp/lnmp1.5-full.tar.gz" target="_blank" rel="noopener">http://soft2.vpser.net/lnmp/lnmp1.5-full.tar.gz</a></p></blockquote><a id="more"></a><blockquote><p>tar -zxvf lnmp1.5-full.tar.gz</p></blockquote><blockquote><p>cd lnmp1.5-full</p></blockquote><blockquote><p>./install.sh</p></blockquote><p>一路默认，虚拟机一个小时应该能安装好 之后就可以访问IP了</p><p>默认的访问目录为这个</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">/<span class="built_in">home</span>/wwwroot/<span class="built_in">default</span></span><br></pre></td></tr></table></figure><h3 id="二，安装wordpress"><a href="#二，安装wordpress" class="headerlink" title="二，安装wordpress"></a>二，安装wordpress</h3><p>此时进入默认的访问目录的上一级</p><blockquote><p>cd /home/wwwroot/</p></blockquote><blockquote><p>wget <a href="https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz" target="_blank" rel="noopener">https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz</a></p></blockquote><blockquote><p>tar -zxvf wordpress-4.9.4-zh_CN.tar.gz</p></blockquote><blockquote><p>mv default old</p></blockquote><blockquote><p>mv wordpress default</p></blockquote><p>此时应该就可以访问wordpress了</p><h3 id="三，创建数据库"><a href="#三，创建数据库" class="headerlink" title="三，创建数据库"></a>三，创建数据库</h3><blockquote><p>mysql -u root -p</p></blockquote><p>输入密码，默认的话就是root</p><blockquote><p>create database wordpress;</p></blockquote><blockquote><p>exit</p></blockquote><h3 id="四，给权限"><a href="#四，给权限" class="headerlink" title="四，给权限"></a>四，给权限</h3><blockquote><p>chown -R 755 /home/wwwroot/</p></blockquote><blockquote><p>chown -R www:www /home/wwwroot/</p></blockquote><hr><p>此时输入IP即可访问配置 wordpress</p>]]></content>
      
      
        <tags>
            
            <tag> WordPress </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>希望博客能坚持下去</title>
      <link href="/2018/06/about-blog/"/>
      <url>/2018/06/about-blog/</url>
      <content type="html"><![CDATA[<p>今天是 18 号了，上个月的 20 号是我第一次在 vps 成功建立了 WordPress。现在已经有二十多篇文章了。<a id="more"></a>（虽然有些只是我做的一些简单的笔记而已）。因为我在网站添加了个日历小工具，只有当天有写文章，那天在日历上才会点亮，所以有时就不得不找些来写了。这篇也许也算吧。</p><p>这段时间确实耗费了非常多非常多的时间在这上面，没想到这东西还能玩上瘾。想想当初买 vps 主要是用来搭梯子的。这个很容易，接着就去了解 Linux，逐渐地了解了一些常用的命令的多种用法，以及其这样命名的缘由。还记得前不久好像是在知乎上看到有人推荐一本 Linux 的书《 Linux 入门很简单》，于是我在图书馆的公众号查了一下，发现居然有，就去借来看。由于其写得很通俗易懂，看得挺投入的，几天就看完了。从中学到了很多，非常感谢这本书。</p><p>之后我还去研究 Python，毕竟这是现在最热门的语言，而且都已经加入高考了，想想以后后辈们都多少会点 Python，自己一点都不了解怎么行。再之后又去研究 Android 开发，想想自己能做一个 APP，这是一件多么值得吹的事。但，终究还是因为它们太难了……然后就没有然后了。</p><p>于是我又回来折腾 Linux 了，毕竟有两台 vps 了，而且前阵子还看到 vultr 有活动，搞了一个帐号，现在一般情况下至少有三台运行着。于是我必须找着事来折腾。一开始就对 WordPress 展开研究，备份、迁移、优化、加证书等等，还有插件、主题这些，也就耗费了挺多时间。</p><p>之后就来研究 vps 可以干哪些有趣的事。</p><ul><li>用来搭建多个网站，只用一台 vps</li><li>用来作为同步盘，同步手机文件和电脑文件</li><li>用来搭建网盘，可以放文件，也可以分享给别人，不限速</li><li>用来搭建一个论坛，人人都可以注册，可以发帖讨论</li><li>用来当下载工具，一些用迅雷下载不动的资源，放在 vps 可以下载得动</li><li>用来搭建一个聊天工具，使用与他人不同的聊天方式</li></ul><p>因为老是研究这些，通过搜索我发现了很多博客网站，好的我都添加到书签和 rss 订阅了。很多个网站我都把他们的全部文章都过一篇了，也收获了很多。然后发现他们喜欢的一些东西，我希望自己不要像他们那样。比如喜欢老是折腾网站的速度，快了那么零点几秒就很高兴，这点我很不能理解，我自己的网页我两三秒能打开就行了。还有折腾 SEO 的，看那么多的文章写到这，我也有点想去搞搞，最后还是算了。我还是少折腾这些吧，不去重视这些，这样我域名被墙了，那就换一个呗，vps 都被墙了，那就在电脑的虚拟机里运行呗。不在乎这些，省点心思做些有意义的事好。</p><p>接下来的想法是有些视频里需要的文章，我可以把它放 Github 的博客里，然后双份链接，保险。域名、流量、被搜索引擎收录这些，现在真心不想去搞，希望以后也不去搞，就单纯的因为想做这些事而去做就好。</p>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>路由器的端口映射和内网穿透</title>
      <link href="/2018/06/about-router/"/>
      <url>/2018/06/about-router/</url>
      <content type="html"><![CDATA[<p>如果我的路由器的管理地址为 <code>192.168.1.1</code> 如果我开放外网访问，当在外网输入我的公网IP，那么默认是访问 公网IP:80 然后进入路由器的管理界面 192.168.1.1</p><a id="more"></a><p><strong>端口映射</strong></p><p>端口映射，可以设置不同的端口来访问路由器内不同的设备。例如我的电脑连接路由器，然后分配的IP是192.168.1.2，此时我可以通过设置一个端口（8888）来映射到电脑，设置完成后输入公网IP:8888 访问的就是电脑了而不是路由器。通过这种方法,可以让电脑开启web服务，然后从外网访问。此处必须输入外网ip来访问，通过内网像 192.168.1.1:8888 这样是没用的。</p><p><strong>内网穿透</strong></p><p>当然上面的那样明显只适合有公网IP的情况，像我的话就没有公网IP。所以外网访问内网就需要内网穿透了，这里使用 ngrok 和<code>老毛子固件</code>。</p><p>我使用的路由器固件为恩山的hiboyhiboy大神的固件，路由器为斐讯K2。</p><p>打开路由器的ngrok穿透界面，去 Server.ngrok.cc 注册帐号，然后得到一个 token 码，复制它，之后开通隧道，可以选择免费的。设置域名前缀，如123，那么最后你的域名就是 <span style="background-color: #ffff00;">123.free.ngrok.cc</span></p><p>之后设置一个端口，用默认的4443也可以。</p><p>开通隧道完成后，再回到路由器这里，然后把信息填进去，</p><p><a href="/img/2018/ngrok.png"><img src="/img/2018/ngrok.png" alt=""></a></p><p>之后再把启动 【ngrok 内网穿透】的的开关打开，再应用本页面设置，此时通过访问域名</p><p>如上面的<span style="background-color: #ffff00;">123.free.ngrok.cc</span></p><p>应该就可以进入路由器管理界面了。</p>]]></content>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭油管镜像</title>
      <link href="/2018/06/you2php/"/>
      <url>/2018/06/you2php/</url>
      <content type="html"><![CDATA[<p>可以零成本观看油管视频，免费，但只能电脑网页看。<br><a id="more"></a><br>项目：<a href="https://github.com/You2php/you2php" target="_blank" rel="noopener">https://github.com/You2php/you2php</a></p><p>利用一台免费的虚拟主机来搭建私人镜像，然后在国内通过访问这台虚拟主机来观看油管的视频。</p><h3 id="一-注册一台虚拟主机"><a href="#一-注册一台虚拟主机" class="headerlink" title="一  注册一台虚拟主机"></a>一  注册一台虚拟主机</h3><p><a href="https://www.000webhost.com/free-website-sign-up" target="_blank" rel="noopener">https://www.000webhost.com/free-website-sign-up</a></p><p>当然得使用国外的，进去后填邮箱、密码、域名前缀就行，之后在邮箱里打开收到的邮件，确认邮箱即可。</p><h3 id="二-YouTube-API"><a href="#二-YouTube-API" class="headerlink" title="二  YouTube API"></a>二  YouTube API</h3><p><a href="https://console.developers.google.com/" target="_blank" rel="noopener">https://console.developers.google.com/</a></p><p>当然得有谷歌账号才行的，进去后右上角，创建项目，然后默认，再点击刚才创建的项目，启用 API 和服务，YouTube Data API v3，启用，创建凭据，之后选下面这个</p><ol><li><ol><li><p><strong>您使用的是哪个 API？</strong></p><p>YouTube Data API v3</p></li><li><p><strong>您从哪里调用 API？</strong></p><p>网页服务器（例如 node.js、Tomcat）</p></li><li><p><strong>您要访问那些数据？</strong></p><p>公开数据</p></li></ol></li></ol><p>再点  <strong>我需要哪些凭据？</strong></p><p>此时就会出现API秘钥，复制保存好，然后点完成。</p><h3 id="三-安装"><a href="#三-安装" class="headerlink" title="三  安装"></a>三  安装</h3><p>可以去开发者的GitHub下载 <a href="https://github.com/You2php/you2php/archive/v1.2.zip" target="_blank" rel="noopener">https://github.com/You2php/you2php/archive/v1.2.zip</a></p><p>也可以在我这本地下载 [download id=&#8221;240&#8243;]</p><p></p><p>下载后是一个zip压缩包，解压后上传到刚才创建的虚拟主机里面。</p><p>在账号登录的情况下，打开<a href="https://files.000webhost.com/" target="_blank" rel="noopener">https://files.000webhost.com/</a></p><p>应该可以进入上传文件界面吧，然后把压缩包里的所有文件都拖到 <strong>public_html </strong>这个文件夹里面去就行。这时候打开虚拟主机分配给你的域名，就可以来配置参数。</p><h3 id="四-配置参数"><a href="#四-配置参数" class="headerlink" title="四  配置参数"></a>四  配置参数</h3><p>都是中文，还是挺容易理解的。到最后填入之前的 <strong>API秘钥</strong> ，再填入邮箱就完成了。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>此时就可以通过这个 虚拟主机分配给你的域名 例如：123.000webhostapp.com 这样来观看油管的视频，可以搜索，可以下载。还是挺不错的。</p>]]></content>
      
      
        <tags>
            
            <tag> 虚拟主机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>克隆 WordPress 网站</title>
      <link href="/2018/06/clone-WordPress/"/>
      <url>/2018/06/clone-WordPress/</url>
      <content type="html"><![CDATA[<p>我现在的网站是放在美国的一个 vps 里的，之前一直想要怎么备份，万一这台服务器被墙了（毕竟真的发生过），或者将来换服务器了，那我怎么转移。当时找了好多方法。</p><a id="more"></a><h3 id="一-自带的导出导入"><a href="#一-自带的导出导入" class="headerlink" title="一 自带的导出导入"></a>一 自带的导出导入</h3><p>这是最简单的了，WordPress 本身就有这功能。登录后台，工具，就有导入和导出。把旧的导出，然后在一台新的服务器上导入，这样所有的文章就都过去了。确实方便，然而，只能导出文章，主题、插件是没法的。</p><h3 id="二-All-in-One-WP-Migration"><a href="#二-All-in-One-WP-Migration" class="headerlink" title="二 All-in-One WP Migration"></a>二 All-in-One WP Migration</h3><p>这是一个插件，在添加插件里搜索就能找到。安装后会出现在后台面板的左侧。点导出，会生成一个文件，可以下载。然后在一台新的服务器也安装这个插件，就能导入刚才下载的这个文件，这样就能把整个网站完整的克隆。这样也可以当做备份，不过免费版最多只能备份 500M 的网站，而且只能备份到本地。</p><h3 id="三-UpdraftPlus"><a href="#三-UpdraftPlus" class="headerlink" title="三 UpdraftPlus"></a>三 UpdraftPlus</h3><p>在添加插件里搜索 back 排第一的就是它。支持定时备份，既可以备份在本地，也可以备份在网盘、邮箱、FTP 这些，而且还是免费的。果然厉害，于是我设置它每天备份到 Dropbox ，只保留两份备份，这样就不会一下子就把网盘给塞满了。</p><p><strong>缺点：</strong>不能像上面那个插件那样，克隆网站，它只是支持数据丢失后的恢复。如果要实现网站克隆，需要花钱购买它的专业版。</p><h3 id="四-免费让-UpdraftPlus-支持网站克隆"><a href="#四-免费让-UpdraftPlus-支持网站克隆" class="headerlink" title="四 免费让 UpdraftPlus 支持网站克隆"></a>四 免费让 UpdraftPlus 支持网站克隆</h3><p>这是我无意发现的。那天是在查让 WordPress 绑定多个域名。</p><p>在 WordPress 程序根目录 wp-config.php 文件中加上下面代码</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">define('WP_SITEURL', 'http<span class="symbol">://</span>' . $_SERVER['HTTP_HOST'])<span class="comment">;</span></span><br><span class="line">define('WP_HOME', 'http<span class="symbol">://</span>' . $_SERVER['HTTP_HOST'])<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这样只要是解析进来的域名都可以打开且不会看到串联到其他域名</p><p>这样修改后再就可以用 UpdraftPlus 来克隆网站了</p><p>我只是想多备份而已，不然这么久的努力忽然消失了，岂不是很心疼。</p>]]></content>
      
      
        <tags>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>更改hosts文件</title>
      <link href="/2018/06/change-hosts/"/>
      <url>/2018/06/change-hosts/</url>
      <content type="html"><![CDATA[<p>原理：我们上网的时候,输入网址,浏览器先检查 hosts 文件中是否有对应的IP地址,如果没有,就连接到DNS服务器,查找这个网址对应的 IP 地址。</p><a id="more"></a><p>我联想到域名绑定IP后是提交到DNS服务器的，那么按理说我去弄一个域名，比如：sb.com 然后将解析到我局域网的IP，比如：192.168.1.8 ，那么我在局域网中就不用输入那么长的IP地址了。哈哈，不过这显然很麻烦，而且也有点浪费，一个域名居然只用在局域网中。</p><p>于是就想到之前的更改 hosts 文件来访问一些被墙的网站，还有来屏蔽一些网站。于是通过此，我就把 39.io 给解析到 192.168.1.39 ，因为我平时还是挺常开虚拟机的，所以只是IP最后这个不同而已 ，例如其它的为 192.168.1.88 ，那么我也可以把它绑定为 88.io</p><p>这样，我通过这个短网址就能访问虚拟机了，而不用去输入那一大串的IP。</p>]]></content>
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>我的相册备份方案</title>
      <link href="/2018/06/photos-backup/"/>
      <url>/2018/06/photos-backup/</url>
      <content type="html"><![CDATA[<p>由于之前小米所提供的5G云空间提示我说不够了，要充钱买更大的空间。这怎么可能，想让我花钱去买空间，呵呵。 于是我寻找备份相册的方案。<br><a id="more"></a></p><h2 id="1-百度云"><a href="#1-百度云" class="headerlink" title="1  百度云"></a>1  百度云</h2><p>因为空间不足，那么想到的就是百度云2T的大空间。（至于说隐私问题，觉得百度云不安全之类的，我一直觉得很奇怪，难道你们相册里面都是一堆自己的裸照？反正我的话涉及隐私也就自拍的照片而已，也没什么见不得人的。） 用手机APP里面就有图片备份功能，设置要备份的相册文件夹就行了。在有WIFI的环境下就会备份到网盘。 <strong>缺点</strong>：只能自动备份，无法自动恢复，比如我换了新手机，它无法自动将相片恢复到新的手机。 还有，备份后是在网盘根目录有一个 来自:MI MAX2 这里就是我这台小米max2备份的数据了，不能自定义路径。。。所以我的解决方法是，把这个文件夹重命名，在前面加个符号，如逗号，然后就可以把这个文件夹移动到隐藏空间。保险一点。</p><h2 id="2-谷歌相册"><a href="#2-谷歌相册" class="headerlink" title="2  谷歌相册"></a>2  谷歌相册</h2><p>以高质量的方式备份照片和视频可以无限空间。在手机上基本看不出压缩前后的差别。通过此我把相册都备份到Google，即使把本地照片删除了还可以通过这APP来查看，点击时会通过联网加载图片。 那如果我换新手机了，想把照片都下载到新手机里面，这个就有点复杂，首先得在Google photos里面开启 Google 云端硬盘 ，这样备份的图片才会显示在Google drive里面，然后可以在Google drive的网页或者客户端把图片下载下来，再传入手机，还是挺麻烦的。 当然啦，这一切都建立在能科学上网的基础之上。所以我仅是把它当多一份备份而已。</p><h2 id="3-Handshaker"><a href="#3-Handshaker" class="headerlink" title="3  Handshaker"></a>3  Handshaker</h2><p>锤子开发的一款电脑端管理安卓手机的工具，平时我也用它在电脑与手机间传输文件，还是挺方便的。在它的设置里，可以设置自动同步，这样每次连接后就会自动同步所有照片到电脑，如果换新手机，可以在这个软件把电脑里的照片复制到新手机。比较不错。 缺点：同步到电脑的相册无法选择，所有的照片都会同步。（不过电脑复制到手机就可以选择哪些相册要哪些不要） mac版的无法像win版那样选择文件存储路劲，所以我只用win版来备份。</p><h2 id="4-Syncthing"><a href="#4-Syncthing" class="headerlink" title="4  Syncthing"></a>4  Syncthing</h2><p>这关联到我之前的  <a href="https://jungui.powersee.pw/?p=194" target="_blank" rel="noopener">搭建个人网盘——syncthing</a>  这篇文章。通过此把要备份的相册文件夹备份到其它设备，可以是电脑、另一台手机、电脑上的虚拟机、远程vps，这些都可以，只要两台设备同时在线就能自动备份。那么我vps的  syncthing  一直开着，这样当我需要备份时就打开手机的APP，扫描一下就能同步。 假如我手机丢了，那么此时我的vps或者电脑里还有保存这些，我可以在新手机也安装syncthing来把vps或者电脑里的照片同步到新手机里面。</p><h2 id="5-小米云服务"><a href="#5-小米云服务" class="headerlink" title="5  小米云服务"></a>5  小米云服务</h2><p>其实我发现我手机里的照片加视频也就2G而已，小米提供的5G我是够用的，之前说空间不足是因为它默认开启了桌面云备份，会把我手机的app都备份上传云端，用了接近1G，所以把它删了，还是可以放很多照片的。然后如果换手机了，依然是MIUI的话直接登录小米账号同步相册就行。如果是其它手机，可以电脑下载小米云服务，把照片下载到本地，在传入新手机。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>平时的话我同步功能都是关闭的，不想随便截张图，保存张照片就自动同步到云端，我会每隔一段时间就清理相册，清理完成再打开同步，同步完就又关闭。感觉现在照片空间还不算多，用小米云优先。但毕竟这段时间研究了挺久这个相片备份问题的，就记录一下吧。</p>]]></content>
      
      <categories>
          
          <category> 手机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在mac把系统固件写入U盘</title>
      <link href="/2018/06/Write-system-firmware-to-u-disk-on-MAC/"/>
      <url>/2018/06/Write-system-firmware-to-u-disk-on-MAC/</url>
      <content type="html"><![CDATA[<p>苹果官方文章:<a href="https://support.apple.com/zh-cn/HT201372" target="_blank" rel="noopener">如何创建可引导的 macOS 安装器</a></p><a id="more"></a><p>最终我执行的是这一段命令</p><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">sudo /Volumes/Install<span class="string">\</span> macOS<span class="string">\</span> High<span class="string">\</span> Sierra/Install<span class="string">\</span> macOS<span class="string">\</span> High<span class="string">\</span> Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/installMacOS --applicationpath /Volumes/Install<span class="string">\</span> macOS<span class="string">\</span> High<span class="string">\</span> Sierra/Install<span class="string">\</span> macOS<span class="string">\</span> High<span class="string">\</span> Sierra.app --nointeraction</span><br></pre></td></tr></table></figure><p>分析：<code>（以下内容是在双击固件，将其挂载，在桌面看得到其快捷方式下进行的）</code></p><p>一，这一段为固件的位置（前面到.app这一段可以通过双击打开桌面的固件，然后将里面的安装程序拖进来，而来得到地址）</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">/Volumes/Install<span class="symbol">\m</span>acOS<span class="symbol">\H</span>igh<span class="symbol">\S</span>ierra/Install<span class="symbol">\m</span>acOS<span class="symbol">\H</span>igh<span class="symbol">\S</span>ierra.app/Contents/Resources/createinstallmedia</span><br></pre></td></tr></table></figure><p>二，这一段为写入的地址，即此时我命名为 installMacOS 的U盘</p><blockquote><p>/Volumes/installMacOS</p></blockquote><p>三，这又为固件地址</p><blockquote><p>/Volumes/Install\ macOS\ High\ Sierra/Install\ macOS\ High\ Sierra.app</p></blockquote><p>写入完成后会出现 done ，估计十几分钟，耐心等待即可。</p>]]></content>
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建个人网盘——syncthing</title>
      <link href="/2018/05/syncthing/"/>
      <url>/2018/05/syncthing/</url>
      <content type="html"><![CDATA[<h3 id="一-下载"><a href="#一-下载" class="headerlink" title="一  下载"></a>一  下载</h3><p>到其官网下载对应的客户端<a id="more"></a>：<a href="https://syncthing.net/" target="_blank" rel="noopener">官网链接</a>  例如我下载Android版和Ubuntu版 Ubuntu版链接：<a href="https://apt.syncthing.net/" target="_blank" rel="noopener">点我</a><br>安卓安装就不用说了，Ubuntu则根据其页面的这段命令输入就行。<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">\# Add the release PGP key<span class="variable">s:</span></span><br><span class="line">curl -s http<span class="variable">s:</span>//syncthing.net/release-key.txt | sudo apt-key <span class="built_in">add</span> -</span><br><span class="line"></span><br><span class="line">\# Add the <span class="string">"stable"</span> channel <span class="keyword">to</span> your APT <span class="keyword">source</span><span class="variable">s:</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"deb https://apt.syncthing.net/ syncthing stable"</span> | sudo tee /etc/apt/sources.<span class="keyword">list</span>.d/syncthing.<span class="keyword">list</span></span><br><span class="line"></span><br><span class="line">\# Update <span class="built_in">and</span> install syncthin<span class="variable">g:</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install syncthing</span><br></pre></td></tr></table></figure></p><h3 id="二-运行"><a href="#二-运行" class="headerlink" title="二  运行"></a>二  运行</h3><p>此时在Ubuntu终端输入命令：<code>syncthing</code> 来运行它 等待看到<br><code>GUI and API listening on 127.0.0.1:8384</code><br>同时按<code>ctrl 和 C</code> 来取消命令 运行此命令的目的时为了生成配文件</p><h3 id="三-修改"><a href="#三-修改" class="headerlink" title="三  修改"></a>三  修改</h3><p>此时我们即可修改配文件<br><code>vim ~/.config/syncthing/config.xml</code><br>然后找到 <code>127.0.0.1:8384</code> 将之改为 <code>0.0.0.0:8384</code><br>更改方法为找到此处 按键盘的 <code>i</code> 便可以修改，改完按 <code>Esc</code> 退出编辑状态，输入 <code>:wq</code> (保存并退出的意思)</p><h3 id="四-配置"><a href="#四-配置" class="headerlink" title="四  配置"></a>四  配置</h3><p>这时就可以输入<code>IP:8384</code> (例如 <code>192.168.123.184:8384</code> )进入管理页面了 我们可以设置账号密码，以免随便他人登录这个界面 点击右上角的 操作 显示ID 将会出现一张二维码，用手机扫描这即可添加关联 然后设置想要同步的文件夹，当两个客户端都运行时就会自动同步</p><p>完</p>]]></content>
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>让一个服务器拥有多个网站</title>
      <link href="/2018/05/Multiple-websites-in-one-server/"/>
      <url>/2018/05/Multiple-websites-in-one-server/</url>
      <content type="html"><![CDATA[<p>可以在一台机器上放置多个网站，若是静态网站的话，理论上可以放置无限多个。</p><a id="more"></a><h3 id="本操作基于Ubuntu"><a href="#本操作基于Ubuntu" class="headerlink" title="本操作基于Ubuntu"></a>本操作基于Ubuntu</h3><p>我的nginx访问的根目录<br><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">/<span class="built_in">home</span>/wwwroot/<span class="built_in">default</span></span><br></pre></td></tr></table></figure></p><p>创建一个”vhost”目录<br><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">mkdir</span> /usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/vhost</span><br></pre></td></tr></table></figure></p><hr><p><span style="color: #ff0000;">创建siteA的配置文件</span><br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo vi <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf<span class="regexp">/vhost/</span>vhost_siteA.conf</span><br></pre></td></tr></table></figure></p><pre class="lang:default decode:true">    server {    listen       80;                        # 监听端口    server_name www.siteA.com siteA.com;    # 站点域名    root  /home/wwwroot/default;              # 站点根目录    index index.html index.htm index.php;   # 默认导航页    location / {        # WordPress固定链接URL重写        if (!-e $request_filename) {            rewrite (.*) /index.php;        }    }    # PHP配置    location ~ \.php$ {        fastcgi_pass unix:/var/run/php5-fpm.sock;        fastcgi_index index.php;        include fastcgi_params;    }}</pre><hr><p><span style="color: #ff0000;">创建siteB的配置文件</span><br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc/</span>nginx<span class="regexp">/vhost/</span>vhost_siteB.conf</span><br></pre></td></tr></table></figure></p><pre class="lang:default decode:true ">    server {    listen       80;                        # 监听端口    server_name www.siteA.com siteA.com;    # 站点域名    root  /home/wwwroot/old;              # 站点根目录    index index.html index.htm index.php;   # 默认导航页    location / {        # WordPress固定链接URL重写        if (!-e $request_filename) {            rewrite (.*) /index.php;        }    }    # PHP配置    location ~ \.php$ {        fastcgi_pass unix:/var/run/php5-fpm.sock;        fastcgi_index index.php;        include fastcgi_params;    }}</pre><hr><p>修改nginx.conf<br><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">sudo vi /usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/nginx.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>在http里加入这段<br><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf<span class="regexp">/vhost/</span>*.conf;</span><br></pre></td></tr></table></figure></p><p>重启 nginx 即可。</p>]]></content>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用Python创建HTTP服务</title>
      <link href="/2018/05/Python-HTTP-server/"/>
      <url>/2018/05/Python-HTTP-server/</url>
      <content type="html"><![CDATA[<p>一般的Linux都带有python<br><a id="more"></a><br>通过命令进入所要共享的文件夹</p><p>输入这个命令<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">80</span></span><br></pre></td></tr></table></figure></p><p>后面的80为端口，这种适合没有搭建其它web服务的</p><p>若已经有搭建类似nginx的服务 可以通过修改端口数字，例如改为88</p><p>或者不输入端口，则会默认采用8000端口</p><p>此时输入 <span style="color: #000000;"><strong>IP:8000</strong></span> 或者 <span style="color: #ff0000;"><strong><span style="color: #000000;">域名:8000</span></strong></span></p><p></p><p>即可访问当前目录下的文件，如果有 <strong>index.html </strong>则会默认加载。</p><p>然后想要停止时，按<code>CTRL + C</code> 取消。</p><hr><p><strong>之前一直搜索想要达到这种效果，却没有找到，没想到今天偶然就看到了，哈哈</strong></p>]]></content>
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>33块购买一年的服务器</title>
      <link href="/2018/05/buy-one-year-vps/"/>
      <url>/2018/05/buy-one-year-vps/</url>
      <content type="html"><![CDATA[<p>我录制了个视频：<a href="https://www.bilibili.com/video/av23960295/" target="_blank" rel="noopener">视频教程</a></p><a id="more"></a><p>首先去服务器网站注册：  <a href="https://www.vultr.com/promo25b?ref=7434326" target="_blank" rel="noopener">活动网址</a></p><p>只要填邮箱和密码就能注册</p><p>可能需要的优惠码  <code>promo25b</code></p><p>此赠送25$活动支持信用卡和PayPal但 <span style="color: #ff0000;"><strong>不支持支付宝</strong></span></p><p>同时关注它的twitter和转发一次能得到3美元：<br><a href="https://my.vultr.com/promo/" target="_blank" rel="noopener">twitter任务链接</a></p>]]></content>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天是520</title>
      <link href="/2018/05/today-is-520/"/>
      <url>/2018/05/today-is-520/</url>
      <content type="html"><![CDATA[<a id="more"></a><p>昨晚成功弄好了企业邮箱，这样以后就拥有了带自己域名的邮箱，而且随意注册，哈哈</p><p>下午成功的弄好了之前弄了好多次都没弄好的个人 wordpress 网站，虽然有点久，不过总算弄好了。</p><p>然而现在我是把文章都复制一份到 hexo 这里来了。时隔不到两个月。已经折腾了许多。</p>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
